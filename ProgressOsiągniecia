import React, { useState, useEffect, useRef } from 'react';
import { 
  Home, ChevronRight, ChevronLeft, BookOpen, Video, Headphones, 
  FileText, Code, Play, Pause, Check, X, AlertCircle, HelpCircle,
  Menu, Search, User, Bell, Settings, ArrowLeft, ArrowRight,
  BarChart, Clock, Target, Award, MessageSquare, Volume2, VolumeX,
  Layers, Grid, List, Filter, Star, Heart, Bookmark, Share2,
  Download, RotateCw, CheckCircle, XCircle, Info, Lightbulb, Users
} from 'lucide-react';

// ============================================
// 1. CLEAR AND CONSISTENT NAVIGATION
// ============================================
const NavigationSystem = ({ currentPath, onNavigate }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [notifications] = useState(3);

  // Struktura nawigacji - logiczna hierarchia
  const navigationStructure = {
    main: [
      { id: 'dashboard', label: 'Panel główny', icon: Home, badge: null },
      { id: 'courses', label: 'Kursy', icon: BookOpen, badge: 'NOWE' },
      { id: 'practice', label: 'Ćwiczenia', icon: Code, badge: null },
      { id: 'progress', label: 'Postępy', icon: BarChart, badge: null },
      { id: 'community', label: 'Społeczność', icon: MessageSquare, badge: '12' }
    ],
    user: [
      { id: 'profile', label: 'Profil', icon: User },
      { id: 'settings', label: 'Ustawienia', icon: Settings },
      { id: 'help', label: 'Pomoc', icon: HelpCircle }
    ]
  };

  return (
    <div className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
      {/* Top Navigation Bar */}
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Left Section - Logo & Main Nav */}
          <div className="flex items-center space-x-8">
            {/* Mobile Menu Button */}
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="lg:hidden p-2 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Logo */}
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">EL</span>
              </div>
              <span className="hidden sm:block font-semibold text-gray-900">EduLearn</span>
            </div>

            {/* Main Navigation - Desktop */}
            <nav className="hidden lg:flex items-center space-x-1">
              {navigationStructure.main.map(item => {
                const Icon = item.icon;
                const isActive = currentPath.startsWith(item.id);
                
                return (
                  <button
                    key={item.id}
                    onClick={() => onNavigate(item.id)}
                    className={`
                      relative px-4 py-2 rounded-lg font-medium text-sm
                      transition-all duration-200 flex items-center space-x-2
                      ${isActive 
                        ? 'bg-blue-50 text-blue-600' 
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                      }
                    `}
                  >
                    <Icon className="w-4 h-4" />
                    <span>{item.label}</span>
                    
                    {/* Badge */}
                    {item.badge && (
                      <span className={`
                        ml-2 px-2 py-0.5 text-xs rounded-full font-semibold
                        ${item.badge === 'NOWE' 
                          ? 'bg-green-100 text-green-700'
                          : 'bg-gray-100 text-gray-700'
                        }
                      `}>
                        {item.badge}
                      </span>
                    )}
                    
                    {/* Active Indicator */}
                    {isActive && (
                      <div className="absolute bottom-0 left-4 right-4 h-0.5 bg-blue-600 rounded-full" />
                    )}
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Right Section - Search & User */}
          <div className="flex items-center space-x-4">
            {/* Search Bar */}
            <div className="hidden md:block relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                placeholder="Szukaj kursów..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 pr-4 py-2 bg-gray-50 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all"
              />
              {searchQuery && (
                <button
                  onClick={() => setSearchQuery('')}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2"
                >
                  <X className="w-4 h-4 text-gray-400 hover:text-gray-600" />
                </button>
              )}
            </div>

            {/* Notifications */}
            <button className="relative p-2 rounded-lg hover:bg-gray-100 transition-colors">
              <Bell className="w-5 h-5 text-gray-600" />
              {notifications > 0 && (
                <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full" />
              )}
            </button>

            {/* User Menu */}
            <div className="relative group">
              <button className="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors">
                <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full" />
                <ChevronRight className="w-4 h-4 text-gray-400 group-hover:rotate-90 transition-transform" />
              </button>
              
              {/* Dropdown */}
              <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all">
                {navigationStructure.user.map(item => {
                  const Icon = item.icon;
                  return (
                    <button
                      key={item.id}
                      onClick={() => onNavigate(item.id)}
                      className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-3 first:rounded-t-lg last:rounded-b-lg"
                    >
                      <Icon className="w-4 h-4" />
                      <span>{item.label}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {isMenuOpen && (
        <div className="lg:hidden border-t border-gray-200 bg-white">
          <nav className="px-4 py-2 space-y-1">
            {navigationStructure.main.map(item => {
              const Icon = item.icon;
              const isActive = currentPath.startsWith(item.id);
              
              return (
                <button
                  key={item.id}
                  onClick={() => {
                    onNavigate(item.id);
                    setIsMenuOpen(false);
                  }}
                  className={`
                    w-full px-4 py-3 rounded-lg text-left flex items-center space-x-3
                    ${isActive 
                      ? 'bg-blue-50 text-blue-600' 
                      : 'text-gray-600 hover:bg-gray-50'
                    }
                  `}
                >
                  <Icon className="w-5 h-5" />
                  <span className="font-medium">{item.label}</span>
                  {item.badge && (
                    <span className="ml-auto px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">
                      {item.badge}
                    </span>
                  )}
                </button>
              );
            })}
          </nav>
        </div>
      )}
    </div>
  );
};

// Breadcrumb Navigation
const BreadcrumbNavigation = ({ path, onNavigate }) => {
  const pathSegments = path.split('/').filter(Boolean);
  
  const breadcrumbLabels = {
    courses: 'Kursy',
    javascript: 'JavaScript',
    basics: 'Podstawy',
    lesson: 'Lekcja',
    practice: 'Ćwiczenia'
  };

  return (
    <nav className="flex items-center space-x-2 text-sm mb-6">
      <button
        onClick={() => onNavigate('/')}
        className="text-gray-500 hover:text-gray-700 transition-colors"
      >
        <Home className="w-4 h-4" />
      </button>
      
      {pathSegments.map((segment, index) => {
        const isLast = index === pathSegments.length - 1;
        const path = pathSegments.slice(0, index + 1).join('/');
        
        return (
          <React.Fragment key={segment}>
            <ChevronRight className="w-4 h-4 text-gray-400" />
            <button
              onClick={() => !isLast && onNavigate(path)}
              className={`
                transition-colors
                ${isLast 
                  ? 'text-gray-900 font-medium cursor-default' 
                  : 'text-gray-500 hover:text-gray-700'
                }
              `}
              disabled={isLast}
            >
              {breadcrumbLabels[segment] || segment}
            </button>
          </React.Fragment>
        );
      })}
    </nav>
  );
};

// Progress Indicator
const ProgressIndicator = ({ current, total, label }) => {
  const percentage = (current / total) * 100;
  
  return (
    <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
      <div className="flex items-center justify-between mb-2">
        <span className="text-sm font-medium text-gray-700">{label}</span>
        <span className="text-sm text-gray-500">
          {current}/{total} ukończone
        </span>
      </div>
      <div className="relative h-2 bg-gray-200 rounded-full overflow-hidden">
        <div 
          className="absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-500"
          style={{ width: `${percentage}%` }}
        />
      </div>
      <div className="flex justify-between mt-2">
        {[...Array(total)].map((_, i) => (
          <div
            key={i}
            className={`
              w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium
              ${i < current 
                ? 'bg-green-100 text-green-700' 
                : i === current 
                  ? 'bg-blue-100 text-blue-700 ring-2 ring-blue-500' 
                  : 'bg-gray-100 text-gray-400'
              }
            `}
          >
            {i < current ? <Check className="w-4 h-4" /> : i + 1}
          </div>
        ))}
      </div>
    </div>
  );
};

// ============================================
// 2. VISUAL HIERARCHY AND READABILITY
// ============================================
const VisualHierarchyContent = () => {
  const [fontSize, setFontSize] = useState('normal');
  const [highContrast, setHighContrast] = useState(false);

  const fontSizes = {
    small: { heading: 'text-xl', body: 'text-sm', caption: 'text-xs' },
    normal: { heading: 'text-2xl', body: 'text-base', caption: 'text-sm' },
    large: { heading: 'text-3xl', body: 'text-lg', caption: 'text-base' }
  };

  return (
    <div className={`${highContrast ? 'bg-black text-white' : 'bg-white text-gray-900'} rounded-xl p-6 transition-colors`}>
      {/* Accessibility Controls */}
      <div className="flex items-center justify-end space-x-4 mb-6 pb-4 border-b border-gray-200">
        {/* Font Size Control */}
        <div className="flex items-center space-x-2">
          <span className="text-sm font-medium">Rozmiar tekstu:</span>
          <div className="flex items-center bg-gray-100 rounded-lg p-1">
            {['small', 'normal', 'large'].map(size => (
              <button
                key={size}
                onClick={() => setFontSize(size)}
                className={`
                  px-3 py-1 rounded text-sm font-medium transition-colors
                  ${fontSize === size 
                    ? 'bg-white text-blue-600 shadow-sm' 
                    : 'text-gray-600 hover:text-gray-900'
                  }
                `}
              >
                A{size === 'large' && '+'}
              </button>
            ))}
          </div>
        </div>

        {/* High Contrast Toggle */}
        <button
          onClick={() => setHighContrast(!highContrast)}
          className={`
            px-4 py-2 rounded-lg font-medium text-sm transition-colors
            ${highContrast 
              ? 'bg-white text-black' 
              : 'bg-gray-900 text-white'
            }
          `}
        >
          {highContrast ? 'Normalny kontrast' : 'Wysoki kontrast'}
        </button>
      </div>

      {/* Content with Visual Hierarchy */}
      <article className="max-w-4xl mx-auto">
        <h1 className={`${fontSizes[fontSize].heading} font-bold mb-4`}>
          Wprowadzenie do programowania JavaScript
        </h1>

        <div className={`${fontSizes[fontSize].body} space-y-4`}>
          <p>
            JavaScript jest jednym z najpopularniejszych języków programowania na świecie.
          </p>
        </div>
      </article>
    </div>
  );
};

// ============================================
// 3. INTERACTIVE AND MULTIMEDIA ELEMENTS
// ============================================
const InteractiveLesson = () => {
  const [activeTab, setActiveTab] = useState('quiz');
  const [quizAnswer, setQuizAnswer] = useState(null);
  const [showFeedback, setShowFeedback] = useState(false);

  const quizOptions = [
    { id: 'a', text: 'let', correct: false },
    { id: 'b', text: 'const', correct: true },
    { id: 'c', text: 'var', correct: false },
    { id: 'd', text: 'define', correct: false }
  ];

  const handleQuizAnswer = (optionId) => {
    setQuizAnswer(optionId);
    setShowFeedback(true);
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-6">
      {/* Quiz Content */}
      {activeTab === 'quiz' && (
        <div className="space-y-6">
          <div className="bg-blue-50 rounded-lg p-4">
            <h4 className="font-semibold text-gray-900 mb-2">
              Pytanie 1 z 5
            </h4>
            <p className="text-gray-700">
              Które słowo kluczowe używamy do deklaracji stałej w JavaScript?
            </p>
          </div>

          {/* Quiz Options */}
          <div className="space-y-3">
            {quizOptions.map(option => {
              const isSelected = quizAnswer === option.id;
              const showResult = showFeedback && isSelected;
              
              return (
                <button
                  key={option.id}
                  onClick={() => handleQuizAnswer(option.id)}
                  disabled={showFeedback}
                  className={`
                    w-full text-left p-4 rounded-lg border-2 transition-all
                    ${showResult && option.correct
                      ? 'bg-green-50 border-green-500'
                      : showResult && !option.correct
                        ? 'bg-red-50 border-red-500'
                        : isSelected
                          ? 'bg-blue-50 border-blue-500'
                          : 'bg-white border-gray-200 hover:border-gray-300'
                    }
                  `}
                >
                  <div className="flex items-center justify-between">
                    <span className="font-medium">{option.text}</span>
                    {showResult && (
                      <div>
                        {option.correct ? (
                          <CheckCircle className="w-5 h-5 text-green-500" />
                        ) : (
                          isSelected && <XCircle className="w-5 h-5 text-red-500" />
                        )}
                      </div>
                    )}
                  </div>
                </button>
              );
            })}
          </div>

          {/* Feedback */}
          {showFeedback && (
            <div className={`
              p-4 rounded-lg
              ${quizOptions.find(o => o.id === quizAnswer)?.correct
                ? 'bg-green-50 border border-green-200'
                : 'bg-red-50 border border-red-200'
              }
            `}>
              <p className="font-semibold">
                {quizOptions.find(o => o.id === quizAnswer)?.correct
                  ? 'Świetnie!'
                  : 'Spróbuj ponownie!'}
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// ============================================
// MAIN DEMO COMPONENT
// ============================================
const EducationalUXSystem = () => {
  const [currentPath, setCurrentPath] = useState('courses/javascript/basics');

  return (
    <div className="min-h-screen bg-gray-50">
      <NavigationSystem currentPath={currentPath} onNavigate={setCurrentPath} />
      
      <div className="max-w-7xl mx-auto px-4 py-8">
        <BreadcrumbNavigation path={currentPath} onNavigate={setCurrentPath} />
        <ProgressIndicator current={2} total={8} label="Podstawy JavaScript" />
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-8">
          <div className="lg:col-span-2 space-y-8">
            <VisualHierarchyContent />
            <InteractiveLesson />
          </div>
        </div>
      </div>
    </div>
  );
};

export default EducationalUXSystem;
