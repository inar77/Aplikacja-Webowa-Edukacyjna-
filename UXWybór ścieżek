import React, { useState, useEffect, useReducer } from 'react';
import { 
  CheckCircle, AlertCircle, ChevronRight, X, MessageCircle,
  Sparkles, TrendingUp, Heart, Moon, Sun, Volume2, VolumeX,
  Settings, Info, RefreshCw, Award, Zap, Target, Clock
} from 'lucide-react';

// ============================================
// MINIMALISTYCZNY DESIGN SYSTEM
// ============================================
const theme = {
  light: {
    background: 'bg-gray-50',
    card: 'bg-white',
    text: 'text-gray-900',
    textMuted: 'text-gray-600',
    border: 'border-gray-200',
    success: 'bg-green-50 text-green-700 border-green-200',
    error: 'bg-red-50 text-red-600 border-red-200',
    warning: 'bg-amber-50 text-amber-700 border-amber-200',
    primary: 'bg-blue-500 hover:bg-blue-600',
    secondary: 'bg-gray-100 hover:bg-gray-200'
  },
  dark: {
    background: 'bg-gray-900',
    card: 'bg-gray-800',
    text: 'text-gray-100',
    textMuted: 'text-gray-400',
    border: 'border-gray-700',
    success: 'bg-green-900 text-green-300 border-green-700',
    error: 'bg-red-900 text-red-300 border-red-700',
    warning: 'bg-amber-900 text-amber-300 border-amber-700',
    primary: 'bg-blue-600 hover:bg-blue-700',
    secondary: 'bg-gray-700 hover:bg-gray-600'
  }
};

// ============================================
// SYSTEM POZYTYWNEGO FEEDBACKU
// ============================================
const FeedbackSystem = ({ type, message, onContinue, onLearnMore }) => {
  const [showDetails, setShowDetails] = useState(false);
  
  const feedbackStyles = {
    error: {
      bg: 'bg-gradient-to-r from-red-50 to-pink-50',
      border: 'border-red-200',
      icon: <AlertCircle className="w-5 h-5 text-red-500" />,
      title: 'Prawie dobrze!',
      subtitle: 'Ka≈ºdy b≈ÇƒÖd to krok do mistrzostwa',
      buttonText: 'Spr√≥buj ponownie',
      buttonStyle: 'bg-red-500 hover:bg-red-600 text-white'
    },
    success: {
      bg: 'bg-gradient-to-r from-green-50 to-emerald-50',
      border: 'border-green-200',
      icon: <CheckCircle className="w-5 h-5 text-green-500" />,
      title: '≈öwietnie!',
      subtitle: 'Jeste≈õ na dobrej drodze',
      buttonText: 'Kontynuuj',
      buttonStyle: 'bg-green-500 hover:bg-green-600 text-white'
    },
    warning: {
      bg: 'bg-gradient-to-r from-amber-50 to-yellow-50',
      border: 'border-amber-200',
      icon: <RefreshCw className="w-5 h-5 text-amber-500" />,
      title: 'Powt√≥rzmy to',
      subtitle: 'Praktyka czyni mistrza',
      buttonText: 'ƒÜwicz dalej',
      buttonStyle: 'bg-amber-500 hover:bg-amber-600 text-white'
    }
  };

  const style = feedbackStyles[type] || feedbackStyles.success;

  return (
    <div className={`
      fixed bottom-0 left-0 right-0 p-4 
      ${style.bg} ${style.border} border-t-2
      transform transition-all duration-500 ease-out
      ${showDetails ? 'h-64' : 'h-32'}
      animate-slideUp shadow-xl
    `}>
      <div className="max-w-2xl mx-auto">
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-3">
            <div className="p-2 bg-white rounded-full shadow-sm">
              {style.icon}
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-900">{style.title}</h3>
              <p className="text-sm text-gray-600 mt-1">{style.subtitle}</p>
              {message && (
                <p className="text-sm text-gray-700 mt-2 bg-white/50 p-2 rounded">
                  üí° {message}
                </p>
              )}
            </div>
          </div>
          
          <button 
            onClick={() => setShowDetails(false)}
            className="p-1 hover:bg-white/50 rounded transition-colors"
          >
            <X className="w-4 h-4 text-gray-500" />
          </button>
        </div>

        <div className="flex items-center space-x-3 mt-4">
          <button
            onClick={onContinue}
            className={`
              flex-1 py-2.5 px-4 rounded-lg font-medium
              transition-all transform hover:scale-105
              ${style.buttonStyle}
            `}
          >
            {style.buttonText}
          </button>
          
          <button
            onClick={() => setShowDetails(!showDetails)}
            className="p-2.5 bg-white hover:bg-gray-50 rounded-lg transition-colors"
          >
            <MessageCircle className="w-5 h-5 text-gray-600" />
          </button>
          
          {type === 'error' && (
            <button
              onClick={onLearnMore}
              className="px-4 py-2.5 bg-white hover:bg-gray-50 rounded-lg text-sm font-medium text-gray-700 transition-colors"
            >
              Dowiedz siƒô wiƒôcej
            </button>
          )}
        </div>

        {showDetails && (
          <div className="mt-4 p-3 bg-white/70 rounded-lg animate-fadeIn">
            <p className="text-sm text-gray-600">
              {type === 'error' 
                ? 'üéØ Wskaz√≥wka: Sprawd≈∫ jeszcze raz sk≈Çadniƒô. Pamiƒôtaj o ≈õrednikach!'
                : '‚≠ê ≈öwietna robota! Mo≈ºesz teraz przej≈õƒá do nastƒôpnego etapu.'}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

// ============================================
// PERSONALIZACJA I USTAWIENIA
// ============================================
const PersonalizationPanel = ({ settings, updateSettings, onClose }) => {
  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-md w-full p-6 animate-fadeIn">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">Personalizacja</h2>
          <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg">
            <X className="w-5 h-5" />
          </button>
        </div>

        <div className="space-y-4">
          {/* Tryb ciemny */}
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div className="flex items-center space-x-3">
              {settings.darkMode ? <Moon className="w-5 h-5" /> : <Sun className="w-5 h-5" />}
              <div>
                <p className="font-medium">Tryb {settings.darkMode ? 'ciemny' : 'jasny'}</p>
                <p className="text-xs text-gray-600">≈Åagodny dla oczu</p>
              </div>
            </div>
            <button
              onClick={() => updateSettings({ darkMode: !settings.darkMode })}
              className={`
                w-12 h-6 rounded-full transition-colors relative
                ${settings.darkMode ? 'bg-blue-500' : 'bg-gray-300'}
              `}
            >
              <div className={`
                w-5 h-5 bg-white rounded-full absolute top-0.5 transition-transform
                ${settings.darkMode ? 'translate-x-6' : 'translate-x-0.5'}
              `} />
            </button>
          </div>

          {/* D≈∫wiƒôki */}
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div className="flex items-center space-x-3">
              {settings.soundEnabled ? <Volume2 className="w-5 h-5" /> : <VolumeX className="w-5 h-5" />}
              <div>
                <p className="font-medium">D≈∫wiƒôki</p>
                <p className="text-xs text-gray-600">Efekty d≈∫wiƒôkowe</p>
              </div>
            </div>
            <button
              onClick={() => updateSettings({ soundEnabled: !settings.soundEnabled })}
              className={`
                w-12 h-6 rounded-full transition-colors relative
                ${settings.soundEnabled ? 'bg-blue-500' : 'bg-gray-300'}
              `}
            >
              <div className={`
                w-5 h-5 bg-white rounded-full absolute top-0.5 transition-transform
                ${settings.soundEnabled ? 'translate-x-6' : 'translate-x-0.5'}
              `} />
            </button>
          </div>

          {/* Animacje */}
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div className="flex items-center space-x-3">
              <Sparkles className="w-5 h-5" />
              <div>
                <p className="font-medium">P≈Çynne animacje</p>
                <p className="text-xs text-gray-600">Redukcja migania</p>
              </div>
            </div>
            <button
              onClick={() => updateSettings({ reducedMotion: !settings.reducedMotion })}
              className={`
                w-12 h-6 rounded-full transition-colors relative
                ${!settings.reducedMotion ? 'bg-blue-500' : 'bg-gray-300'}
              `}
            >
              <div className={`
                w-5 h-5 bg-white rounded-full absolute top-0.5 transition-transform
                ${!settings.reducedMotion ? 'translate-x-6' : 'translate-x-0.5'}
              `} />
            </button>
          </div>

          {/* Tempo nauki */}
          <div className="p-3 bg-gray-50 rounded-lg">
            <p className="font-medium mb-2">Tempo nauki</p>
            <div className="grid grid-cols-3 gap-2">
              {['wolne', 'normalne', 'szybkie'].map(pace => (
                <button
                  key={pace}
                  onClick={() => updateSettings({ learningPace: pace })}
                  className={`
                    py-2 px-3 rounded-lg text-sm font-medium transition-colors
                    ${settings.learningPace === pace 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-white text-gray-700 hover:bg-gray-100'}
                  `}
                >
                  {pace}
                </button>
              ))}
            </div>
          </div>

          {/* Poziom trudno≈õci */}
          <div className="p-3 bg-gray-50 rounded-lg">
            <p className="font-medium mb-2">Poziom trudno≈õci</p>
            <div className="space-y-2">
              <input
                type="range"
                min="1"
                max="5"
                value={settings.difficulty}
                onChange={(e) => updateSettings({ difficulty: parseInt(e.target.value) })}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-600">
                <span>≈Åatwy</span>
                <span>Trudny</span>
              </div>
            </div>
          </div>
        </div>

        <button
          onClick={onClose}
          className="w-full mt-6 bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 rounded-lg transition-colors"
        >
          Zapisz ustawienia
        </button>
      </div>
    </div>
  );
};

// ============================================
// G≈Å√ìWNY KOMPONENT MAPY Z UX
// ============================================
const EnhancedUXCareerMap = () => {
  const [settings, setSettings] = useState({
    darkMode: false,
    soundEnabled: true,
    reducedMotion: false,
    learningPace: 'normalne',
    difficulty: 3
  });

  const [showSettings, setShowSettings] = useState(false);
  const [feedback, setFeedback] = useState(null);
  const [selectedPath, setSelectedPath] = useState(null);
  const [hoveredNode, setHoveredNode] = useState(null);

  // Przyk≈Çadowe ≈õcie≈ºki kariery
  const careerPaths = [
    {
      id: 'frontend',
      name: 'Frontend Developer',
      icon: 'üåê',
      color: 'from-blue-400 to-cyan-400',
      description: 'Tw√≥rz piƒôkne interfejsy',
      modules: 12,
      estimatedTime: '3 miesiƒÖce',
      difficulty: 3,
      skills: ['HTML', 'CSS', 'JavaScript', 'React']
    },
    {
      id: 'backend',
      name: 'Backend Developer',
      icon: '‚öôÔ∏è',
      color: 'from-purple-400 to-pink-400',
      description: 'Buduj solidne serwery',
      modules: 14,
      estimatedTime: '4 miesiƒÖce',
      difficulty: 4,
      skills: ['Python', 'Django', 'API', 'Bazy danych']
    },
    {
      id: 'design',
      name: 'UX/UI Designer',
      icon: 'üé®',
      color: 'from-pink-400 to-rose-400',
      description: 'Projektuj do≈õwiadczenia',
      modules: 10,
      estimatedTime: '2 miesiƒÖce',
      difficulty: 2,
      skills: ['Figma', 'Design Systems', 'Prototyping']
    },
    {
      id: 'mobile',
      name: 'Mobile Developer',
      icon: 'üì±',
      color: 'from-green-400 to-emerald-400',
      description: 'Aplikacje w kieszeni',
      modules: 15,
      estimatedTime: '4 miesiƒÖce',
      difficulty: 4,
      skills: ['React Native', 'Flutter', 'iOS', 'Android']
    }
  ];

  // Obs≈Çuga ustawie≈Ñ
  const updateSettings = (newSettings) => {
    setSettings(prev => ({ ...prev, ...newSettings }));
    
    // Zastosuj tryb ciemny
    if (newSettings.darkMode !== undefined) {
      document.documentElement.classList.toggle('dark', newSettings.darkMode);
    }
    
    // Odtw√≥rz d≈∫wiƒôk potwierdzenia
    if (settings.soundEnabled && !settings.reducedMotion) {
      playSound('confirm');
    }
  };

  // Symulacja odtwarzania d≈∫wiƒôku
  const playSound = (type) => {
    if (!settings.soundEnabled) return;
    console.log(`Playing sound: ${type}`);
    // Tu dodaj prawdziwe d≈∫wiƒôki u≈ºywajƒÖc Web Audio API lub <audio>
  };

  // Obs≈Çuga wyboru ≈õcie≈ºki
  const selectPath = (path) => {
    setSelectedPath(path);
    playSound('select');
    
    // Poka≈º pozytywny feedback
    setFeedback({
      type: 'success',
      message: `≈öwietny wyb√≥r! ${path.name} to fascynujƒÖca ≈õcie≈ºka rozwoju.`
    });
  };

  // Obs≈Çuga b≈Çƒôd√≥w z pozytywnym podej≈õciem
  const handleMistake = () => {
    setFeedback({
      type: 'error',
      message: 'To czƒôsty b≈ÇƒÖd! Wiƒôkszo≈õƒá os√≥b myli te pojƒôcia na poczƒÖtku. Spr√≥bujmy jeszcze raz.'
    });
    playSound('error');
  };

  // Animacje wej≈õcia
  useEffect(() => {
    // P≈Çynne pojawianie siƒô element√≥w
    const elements = document.querySelectorAll('.animate-enter');
    elements.forEach((el, index) => {
      setTimeout(() => {
        el.classList.add('opacity-100', 'translate-y-0');
        el.classList.remove('opacity-0', 'translate-y-4');
      }, index * 100);
    });
  }, []);

  const currentTheme = settings.darkMode ? theme.dark : theme.light;

  return (
    <div className={`min-h-screen ${currentTheme.background} transition-colors duration-300`}>
      {/* Minimalistyczny header */}
      <header className={`${currentTheme.card} shadow-sm border-b ${currentTheme.border}`}>
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className={`text-2xl font-semibold ${currentTheme.text}`}>
                Twoja ≈öcie≈ºka
              </h1>
              <span className={`text-sm ${currentTheme.textMuted}`}>
                Wybierz kierunek rozwoju
              </span>
            </div>
            
            <div className="flex items-center space-x-3">
              {/* Minimalistyczne ikony akcji */}
              <button 
                onClick={() => setShowSettings(true)}
                className={`p-2 rounded-lg ${currentTheme.secondary} transition-colors`}
              >
                <Settings className="w-5 h-5" />
              </button>
              <button className={`p-2 rounded-lg ${currentTheme.secondary} transition-colors`}>
                <Info className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* G≈Ç√≥wna tre≈õƒá z du≈ºƒÖ ilo≈õciƒÖ przestrzeni */}
      <main className="max-w-6xl mx-auto px-4 py-12">
        {/* Sekcja wyboru ≈õcie≈ºki */}
        <div className="mb-12">
          <h2 className={`text-lg font-medium ${currentTheme.text} mb-2`}>
            Dostƒôpne ≈õcie≈ºki kariery
          </h2>
          <p className={`${currentTheme.textMuted} mb-8`}>
            Ka≈ºda ≈õcie≈ºka jest dostosowana do Twojego tempa i poziomu
          </p>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {careerPaths.map((path, index) => (
              <button
                key={path.id}
                onClick={() => selectPath(path)}
                onMouseEnter={() => setHoveredNode(path.id)}
                onMouseLeave={() => setHoveredNode(null)}
                className={`
                  group relative p-6 rounded-2xl transition-all duration-300
                  ${currentTheme.card} hover:shadow-xl
                  transform hover:-translate-y-1
                  opacity-0 translate-y-4 animate-enter
                  ${selectedPath?.id === path.id ? 'ring-2 ring-blue-500' : ''}
                  ${settings.reducedMotion ? '' : 'hover:scale-105'}
                `}
                style={{ animationDelay: `${index * 100}ms` }}
              >
                {/* Gradient background on hover */}
                <div className={`
                  absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-10
                  bg-gradient-to-br ${path.color}
                  transition-opacity duration-300
                `} />

                {/* Ikona */}
                <div className="text-4xl mb-4">{path.icon}</div>

                {/* Tytu≈Ç */}
                <h3 className={`font-semibold ${currentTheme.text} mb-2`}>
                  {path.name}
                </h3>

                {/* Opis */}
                <p className={`text-sm ${currentTheme.textMuted} mb-4`}>
                  {path.description}
                </p>

                {/* Metadane */}
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-xs">
                    <span className={currentTheme.textMuted}>Modu≈Çy</span>
                    <span className={`font-medium ${currentTheme.text}`}>
                      {path.modules}
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-xs">
                    <span className={currentTheme.textMuted}>Czas</span>
                    <span className={`font-medium ${currentTheme.text}`}>
                      {path.estimatedTime}
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-xs">
                    <span className={currentTheme.textMuted}>Poziom</span>
                    <div className="flex space-x-1">
                      {[...Array(5)].map((_, i) => (
                        <div
                          key={i}
                          className={`w-2 h-2 rounded-full ${
                            i < path.difficulty 
                              ? 'bg-blue-500' 
                              : 'bg-gray-300'
                          }`}
                        />
                      ))}
                    </div>
                  </div>
                </div>

                {/* Skills preview on hover */}
                {hoveredNode === path.id && !settings.reducedMotion && (
                  <div className="absolute -top-2 left-0 right-0 flex justify-center space-x-2 animate-fadeIn">
                    {path.skills.slice(0, 3).map((skill, i) => (
                      <span
                        key={skill}
                        className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full"
                        style={{ animationDelay: `${i * 50}ms` }}
                      >
                        {skill}
                      </span>
                    ))}
                  </div>
                )}
              </button>
            ))}
          </div>
        </div>

        {/* Wy≈õwietlanie wybranej ≈õcie≈ºki */}
        {selectedPath && (
          <div className={`
            ${currentTheme.card} rounded-2xl p-8 animate-fadeIn
            shadow-lg border ${currentTheme.border}
          `}>
            <div className="flex items-start justify-between mb-6">
              <div>
                <h2 className={`text-2xl font-semibold ${currentTheme.text} mb-2`}>
                  {selectedPath.name}
                </h2>
                <p className={currentTheme.textMuted}>
                  Rozpocznij swojƒÖ przygodƒô z {selectedPath.name}
                </p>
              </div>
              <span className="text-5xl">{selectedPath.icon}</span>
            </div>

            {/* Progress bar */}
            <div className="mb-6">
              <div className="flex justify-between text-sm mb-2">
                <span className={currentTheme.textMuted}>Postƒôp</span>
                <span className={`font-medium ${currentTheme.text}`}>0%</span>
              </div>
              <div className="h-3 bg-gray-200 rounded-full overflow-hidden">
                <div className={`h-full bg-gradient-to-r ${selectedPath.color} w-0 transition-all duration-1000`} />
              </div>
            </div>

            {/* Umiejƒôtno≈õci do zdobycia */}
            <div className="mb-6">
              <h3 className={`font-medium ${currentTheme.text} mb-3`}>
                Umiejƒôtno≈õci do zdobycia
              </h3>
              <div className="flex flex-wrap gap-2">
                {selectedPath.skills.map(skill => (
                  <span
                    key={skill}
                    className="px-3 py-1.5 bg-gray-100 text-gray-700 rounded-lg text-sm"
                  >
                    {skill}
                  </span>
                ))}
              </div>
            </div>

            <button className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-medium py-3 rounded-lg transition-all transform hover:scale-105">
              Rozpocznij naukƒô ‚Üí
            </button>
          </div>
        )}
      </main>

      {/* Feedback System */}
      {feedback && (
        <FeedbackSystem
          type={feedback.type}
          message={feedback.message}
          onContinue={() => setFeedback(null)}
          onLearnMore={() => {
            setFeedback(null);
            // Otw√≥rz materia≈Çy pomocnicze
          }}
        />
      )}

      {/* Panel personalizacji */}
      {showSettings && (
        <PersonalizationPanel
          settings={settings}
          updateSettings={updateSettings}
          onClose={() => setShowSettings(false)}
        />
      )}

      {/* Style dla animacji */}
      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideUp {
          from { transform: translateY(100%); }
          to { transform: translateY(0); }
        }
        
        .animate-enter {
          animation: fadeIn 0.6s ease-out forwards;
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out;
        }
        
        .animate-slideUp {
          animation: slideUp 0.3s ease-out;
        }
      `}</style>
    </div>
  );
};

export default EnhancedUXCareerMap;
