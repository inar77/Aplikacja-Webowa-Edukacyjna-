// ============================================
// 1. FIREBASE CONFIG & SETUP
// ============================================

// firebase.js
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';
import { getAnalytics } from 'firebase/analytics';

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);
export const analytics = getAnalytics(app);

// ============================================
// 2. JOURNAL SERVICE - FIREBASE OPERATIONS
// ============================================

// services/journalService.js
import { 
  collection, 
  addDoc, 
  getDocs, 
  query, 
  where, 
  orderBy, 
  limit,
  serverTimestamp,
  updateDoc,
  doc,
  increment,
  getDoc,
  setDoc
} from 'firebase/firestore';
import { db } from '../firebase';

export const journalService = {
  // Zapisz wpis do dziennika
  async saveEntry(userId, entry) {
    try {
      const docRef = await addDoc(collection(db, 'journalEntries'), {
        userId,
        text: entry.text,
        mood: entry.mood,
        tags: entry.tags || [],
        mentalStrengthGained: entry.mentalStrengthGained || 0,
        challenge: entry.challenge || null,
        reflectionMode: entry.reflectionMode || 'questions',
        createdAt: serverTimestamp(),
        date: new Date().toISOString().split('T')[0]
      });
      
      // Aktualizuj statystyki użytkownika
      await this.updateUserStats(userId, entry.mentalStrengthGained);
      
      return docRef.id;
    } catch (error) {
      console.error('Error saving journal entry:', error);
      throw error;
    }
  },

  // Pobierz wpisy użytkownika
  async getUserEntries(userId, limitCount = 30) {
    try {
      const q = query(
        collection(db, 'journalEntries'),
        where('userId', '==', userId),
        orderBy('createdAt', 'desc'),
        limit(limitCount)
      );
      
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error fetching entries:', error);
      return [];
    }
  },

  // Zapisz ukończone wyzwanie
  async completeChallenge(userId, challenge) {
    try {
      await addDoc(collection(db, 'completedChallenges'), {
        userId,
        challengeId: challenge.id,
        challengeType: challenge.type,
        reward: challenge.reward,
        completedAt: serverTimestamp()
      });
      
      // Dodaj mental strength
      const rewardPoints = parseInt(challenge.reward.match(/\d+/)[0]);
      await this.updateUserStats(userId, rewardPoints);
      
      return true;
    } catch (error) {
      console.error('Error completing challenge:', error);
      return false;
    }
  },

  // Aktualizuj statystyki użytkownika
  async updateUserStats(userId, mentalStrengthGained) {
    try {
      const userRef = doc(db, 'users', userId);
      const userDoc = await getDoc(userRef);
      
      if (userDoc.exists()) {
        await updateDoc(userRef, {
          mentalStrength: increment(mentalStrengthGained),
          totalReflections: increment(1),
          lastReflectionDate: serverTimestamp(),
          currentStreak: increment(1) // Simplified - should check actual dates
        });
      } else {
        // Utwórz nowy dokument użytkownika
        await setDoc(userRef, {
          mentalStrength: mentalStrengthGained,
          totalReflections: 1,
          lastReflectionDate: serverTimestamp(),
          currentStreak: 1,
          createdAt: serverTimestamp()
        });
      }
    } catch (error) {
      console.error('Error updating user stats:', error);
    }
  },

  // Analiza AI wpisów
  async analyzeEntries(userId) {
    try {
      const entries = await this.getUserEntries(userId, 7);
      
      // Tu możesz dodać integrację z Claude/OpenAI API
      const insights = await this.generateAIInsights(entries);
      
      // Zapisz insights do Firebase
      await addDoc(collection(db, 'aiInsights'), {
        userId,
        insights,
        generatedAt: serverTimestamp()
      });
      
      return insights;
    } catch (error) {
      console.error('Error analyzing entries:', error);
      return null;
    }
  },

  // Generuj AI Insights (placeholder - zastąp prawdziwym API)
  async generateAIInsights(entries) {
    // Tutaj dodaj integrację z Claude API / OpenAI
    // const response = await fetch('https://api.anthropic.com/v1/complete', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'X-API-Key': process.env.REACT_APP_CLAUDE_API_KEY
    //   },
    //   body: JSON.stringify({
    //     prompt: `Analyze these journal entries and provide insights: ${entries}`,
    //     model: 'claude-2',
    //     max_tokens: 200
    //   })
    // });
    
    // Placeholder insights
    return {
      patterns: [
        'Największa produktywność między 9-11 rano',
        'Tendencja do prokrastynacji po obiedzie',
        'Pozytywny wpływ ćwiczeń na nastrój'
      ],
      recommendations: [
        'Zaplanuj najtrudniejsze zadania na poranek',
        'Wprowadź 15-minutowe przerwy co 90 minut',
        'Kontynuuj regularne ćwiczenia'
      ],
      strengths: [
        'Świetna samodyscyplina',
        'Dobra analiza własnych błędów',
        'Rosnąca odporność na stres'
      ]
    };
  }
};

// ============================================
// 3. UNIFIED XP SYSTEM - ŁĄCZENIE HARD & SOFT SKILLS
// ============================================

// contexts/UnifiedProgressContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { auth, db } from '../firebase';
import { doc, onSnapshot, updateDoc, increment } from 'firebase/firestore';

const UnifiedProgressContext = createContext();

export const useUnifiedProgress = () => useContext(UnifiedProgressContext);

export const UnifiedProgressProvider = ({ children }) => {
  const [userProgress, setUserProgress] = useState({
    // Hard Skills (z quizów i lekcji)
    technicalXP: 0,
    completedLessons: 0,
    quizzesPassed: 0,
    
    // Soft Skills (z dziennika)
    mentalStrength: 0,
    reflectionStreak: 0,
    challengesCompleted: 0,
    
    // Combined Score
    totalCareerScore: 0,
    level: 1,
    rank: 'Nowicjusz'
  });

  useEffect(() => {
    if (auth.currentUser) {
      const unsubscribe = onSnapshot(
        doc(db, 'users', auth.currentUser.uid),
        (doc) => {
          if (doc.exists()) {
            const data = doc.data();
            calculateTotalScore(data);
          }
        }
      );
      
      return () => unsubscribe();
    }
  }, [auth.currentUser]);

  const calculateTotalScore = (data) => {
    // 70% Hard Skills + 30% Soft Skills
    const hardSkillsScore = (data.technicalXP || 0) * 0.7;
    const softSkillsScore = (data.mentalStrength || 0) * 0.3;
    const totalScore = hardSkillsScore + softSkillsScore;
    
    // Calculate level and rank
    const level = Math.floor(totalScore / 100) + 1;
    const rank = getRankByLevel(level);
    
    setUserProgress({
      ...data,
      totalCareerScore: totalScore,
      level,
      rank
    });
  };

  const getRankByLevel = (level) => {
    if (level < 5) return 'Nowicjusz';
    if (level < 10) return 'Adept';
    if (level < 20) return 'Profesjonalista';
    if (level < 30) return 'Ekspert';
    if (level < 50) return 'Mistrz';
    return 'Legenda';
  };

  const addTechnicalXP = async (xp) => {
    if (auth.currentUser) {
      await updateDoc(doc(db, 'users', auth.currentUser.uid), {
        technicalXP: increment(xp)
      });
    }
  };

  const addMentalStrength = async (points) => {
    if (auth.currentUser) {
      await updateDoc(doc(db, 'users', auth.currentUser.uid), {
        mentalStrength: increment(points)
      });
    }
  };

  return (
    <UnifiedProgressContext.Provider value={{
      userProgress,
      addTechnicalXP,
      addMentalStrength,
      totalScore: userProgress.totalCareerScore,
      level: userProgress.level,
      rank: userProgress.rank
    }}>
      {children}
    </UnifiedProgressContext.Provider>
  );
};

// ============================================
// 4. MAIN APP INTEGRATION
// ============================================

// App.jsx - Główna aplikacja z nawigacją
import React, { useState } from 'react';
import { 
  Home, BookOpen, Brain, Trophy, Users, 
  Settings, Menu, X, Zap, Target
} from 'lucide-react';
import CareerPath from './components/CareerPath';
import SmartJournal from './components/SmartJournal';
import Leaderboard from './components/Leaderboard';
import Dashboard from './components/Dashboard';
import { UnifiedProgressProvider, useUnifiedProgress } from './contexts/UnifiedProgressContext';

const MainApp = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const { userProgress } = useUnifiedProgress();

  const navigation = [
    { id: 'dashboard', label: 'Dashboard', icon: Home },
    { id: 'career', label: 'Ścieżka Kariery', icon: Target },
    { id: 'journal', label: 'Rozwój Mentalny', icon: Brain },
    { id: 'leaderboard', label: 'Ranking', icon: Trophy },
    { id: 'community', label: 'Społeczność', icon: Users }
  ];

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <div className={`${sidebarOpen ? 'w-64' : 'w-20'} bg-white shadow-lg transition-all duration-300`}>
        <div className="p-4">
          <div className="flex items-center justify-between mb-8">
            <div className={`flex items-center space-x-2 ${!sidebarOpen && 'justify-center'}`}>
              <Zap className="w-8 h-8 text-indigo-600" />
              {sidebarOpen && <span className="text-xl font-bold">PathFinder</span>}
            </div>
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="p-1 hover:bg-gray-100 rounded"
            >
              {sidebarOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
            </button>
          </div>

          {/* User Progress Summary */}
          {sidebarOpen && (
            <div className="mb-6 p-4 bg-gradient-to-br from-indigo-50 to-purple-50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">Poziom</span>
                <span className="font-bold text-lg">{userProgress.level}</span>
              </div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">Ranga</span>
                <span className="font-bold">{userProgress.rank}</span>
              </div>
              <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                <div 
                  className="h-full bg-gradient-to-r from-indigo-500 to-purple-600"
                  style={{ width: `${(userProgress.totalCareerScore % 100)}%` }}
                />
              </div>
              <div className="mt-2 grid grid-cols-2 gap-2 text-xs">
                <div>
                  <span className="text-gray-500">Tech XP:</span>
                  <span className="ml-1 font-bold">{userProgress.technicalXP}</span>
                </div>
                <div>
                  <span className="text-gray-500">Mental:</span>
                  <span className="ml-1 font-bold">{userProgress.mentalStrength}</span>
                </div>
              </div>
            </div>
          )}

          {/* Navigation */}
          <nav className="space-y-2">
            {navigation.map(item => {
              const Icon = item.icon;
              return (
                <button
                  key={item.id}
                  onClick={() => setActiveTab(item.id)}
                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${
                    activeTab === item.id
                      ? 'bg-indigo-100 text-indigo-600'
                      : 'hover:bg-gray-100 text-gray-700'
                  }`}
                >
                  <Icon className="w-5 h-5" />
                  {sidebarOpen && <span>{item.label}</span>}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-y-auto">
        {activeTab === 'dashboard' && <Dashboard />}
        {activeTab === 'career' && <CareerPath />}
        {activeTab === 'journal' && <SmartJournal />}
        {activeTab === 'leaderboard' && <Leaderboard />}
        {activeTab === 'community' && <Community />}
      </div>
    </div>
  );
};

// Wrap w Provider
const App = () => (
  <UnifiedProgressProvider>
    <MainApp />
  </UnifiedProgressProvider>
);

export default App;

// ============================================
// 5. LEADERBOARD COMPONENT
// ============================================

// components/Leaderboard.jsx
import React, { useState, useEffect } from 'react';
import { collection, query, orderBy, limit, getDocs } from 'firebase/firestore';
import { db } from '../firebase';
import { Trophy, Medal, Award, TrendingUp, Users } from 'lucide-react';

const Leaderboard = () => {
  const [leaders, setLeaders] = useState([]);
  const [filter, setFilter] = useState('total'); // total | mental | technical

  useEffect(() => {
    fetchLeaderboard();
  }, [filter]);

  const fetchLeaderboard = async () => {
    try {
      const sortField = filter === 'mental' ? 'mentalStrength' : 
                        filter === 'technical' ? 'technicalXP' : 
                        'totalCareerScore';
      
      const q = query(
        collection(db, 'users'),
        orderBy(sortField, 'desc'),
        limit(100)
      );
      
      const snapshot = await getDocs(q);
      const users = snapshot.docs.map((doc, index) => ({
        id: doc.id,
        rank: index + 1,
        ...doc.data()
      }));
      
      setLeaders(users);
    } catch (error) {
      console.error('Error fetching leaderboard:', error);
    }
  };

  const getRankIcon = (rank) => {
    if (rank === 1) return <Trophy className="w-6 h-6 text-yellow-500" />;
    if (rank === 2) return <Medal className="w-6 h-6 text-gray-400" />;
    if (rank === 3) return <Medal className="w-6 h-6 text-orange-600" />;
    return <span className="w-6 text-center font-bold">{rank}</span>;
  };

  return (
    <div className="p-6">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">Ranking Globalny</h1>
        
        {/* Filter Tabs */}
        <div className="flex space-x-2 mb-6">
          <button
            onClick={() => setFilter('total')}
            className={`px-4 py-2 rounded-lg ${
              filter === 'total' 
                ? 'bg-indigo-600 text-white' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            Ogólny
          </button>
          <button
            onClick={() => setFilter('mental')}
            className={`px-4 py-2 rounded-lg ${
              filter === 'mental' 
                ? 'bg-purple-600 text-white' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            Siła Mentalna
          </button>
          <button
            onClick={() => setFilter('technical')}
            className={`px-4 py-2 rounded-lg ${
              filter === 'technical' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            Umiejętności Techniczne
          </button>
        </div>

        {/* Leaderboard Table */}
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Pozycja
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Użytkownik
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Poziom
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Punkty
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {leaders.map((user) => (
                <tr key={user.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      {getRankIcon(user.rank)}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold">
                        {user.displayName?.[0] || 'U'}
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">
                          {user.displayName || 'Użytkownik'}
                        </div>
                        <div className="text-sm text-gray-500">
                          {user.rank}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                      Lvl {user.level || 1}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {filter === 'mental' ? user.mentalStrength :
                     filter === 'technical' ? user.technicalXP :
                     user.totalCareerScore || 0}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Leaderboard;
