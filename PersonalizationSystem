import React, { useState, useEffect } from 'react';
import { 
  User, Heart, Target, Briefcase, Globe, Home, Clock, DollarSign,
  Code, Palette, Camera, Utensils, Wrench, Scissors, Truck, HeartHandshake,
  Building, Users, TrendingUp, MapPin, Award, CheckCircle, ChevronRight,
  Star, Sparkles, BookOpen, PlayCircle, FileText, Upload, Send,
  Calendar, Flag, Zap, Shield, Coffee, Sun, Moon, Mountain, Waves
} from 'lucide-react';

// ============================================
// AI CAREER ADVISOR ENGINE
// ============================================
class CareerAdvisorEngine {
  constructor() {
    this.careerPaths = {
      // IT & Tech
      frontend: {
        id: 'frontend',
        name: 'Frontend Developer',
        icon: '💻',
        category: 'tech',
        avgSalary: '8000-15000 PLN',
        timeToLearn: '6-12 miesięcy',
        remoteWork: 95,
        difficulty: 3,
        demand: 'bardzo wysoki',
        skills: ['HTML', 'CSS', 'JavaScript', 'React'],
        personality: ['kreatywny', 'dokładny', 'cierpliwy'],
        realTasks: [
          'Stwórz stronę portfolio',
          'Przeprojektuj interfejs aplikacji',
          'Zbuduj responsywną landing page'
        ]
      },
      backend: {
        id: 'backend',
        name: 'Backend Developer',
        icon: '⚙️',
        category: 'tech',
        avgSalary: '9000-18000 PLN',
        timeToLearn: '8-14 miesięcy',
        remoteWork: 90,
        difficulty: 4,
        demand: 'bardzo wysoki',
        skills: ['Python', 'Node.js', 'Bazy danych', 'API'],
        personality: ['analityczny', 'logiczny', 'systematyczny'],
        realTasks: [
          'Zbuduj API REST',
          'Stwórz system autoryzacji',
          'Zoptymalizuj bazę danych'
        ]
      },

      // Zawody kreatywne
      photographer: {
        id: 'photographer',
        name: 'Fotograf',
        icon: '📸',
        category: 'creative',
        avgSalary: '3000-8000 PLN',
        timeToLearn: '3-6 miesięcy',
        remoteWork: 30,
        difficulty: 2,
        demand: 'średni',
        skills: ['Kompozycja', 'Światło', 'Edycja', 'Marketing'],
        personality: ['kreatywny', 'towarzyski', 'elastyczny'],
        realTasks: [
          'Zrób sesję portretową',
          'Sfotografuj 5 produktów',
          'Stwórz portfolio na Instagram'
        ]
      },
      graphicDesigner: {
        id: 'graphicDesigner',
        name: 'Grafik',
        icon: '🎨',
        category: 'creative',
        avgSalary: '4000-10000 PLN',
        timeToLearn: '6-12 miesięcy',
        remoteWork: 80,
        difficulty: 3,
        demand: 'wysoki',
        skills: ['Photoshop', 'Illustrator', 'Typografia', 'UX'],
        personality: ['kreatywny', 'innowacyjny', 'otwarty'],
        realTasks: [
          'Zaprojektuj logo firmy',
          'Stwórz pakiet social media',
          'Przygotuj branding kawiarni'
        ]
      },

      // Zawody praktyczne/rzemieślnicze
      electrician: {
        id: 'electrician',
        name: 'Elektryk',
        icon: '⚡',
        category: 'practical',
        avgSalary: '4000-8000 PLN',
        timeToLearn: '6-12 miesięcy',
        remoteWork: 0,
        difficulty: 3,
        demand: 'bardzo wysoki',
        skills: ['Instalacje', 'Pomiary', 'Bezpieczeństwo', 'Schematy'],
        personality: ['dokładny', 'odpowiedzialny', 'techniczny'],
        realTasks: [
          'Wymień gniazdko elektryczne',
          'Sprawdź instalację bezpiecznikiem',
          'Narysuj schemat mieszkania'
        ],
        certification: 'Uprawnienia SEP do 1kV'
      },
      carpenter: {
        id: 'carpenter',
        name: 'Stolarz',
        icon: '🪵',
        category: 'practical',
        avgSalary: '3500-7000 PLN',
        timeToLearn: '6-18 miesięcy',
        remoteWork: 0,
        difficulty: 3,
        demand: 'wysoki',
        skills: ['Obróbka drewna', 'Narzędzia', 'Projektowanie', 'Wykończenia'],
        personality: ['precyzyjny', 'cierpliwy', 'manualny'],
        realTasks: [
          'Zbuduj półkę na książki',
          'Napraw stare krzesło',
          'Wykonaj ramkę na zdjęcie'
        ]
      },
      mechanic: {
        id: 'mechanic',
        name: 'Mechanik samochodowy',
        icon: '🔧',
        category: 'practical',
        avgSalary: '3500-8000 PLN',
        timeToLearn: '12-24 miesięcy',
        remoteWork: 0,
        difficulty: 4,
        demand: 'wysoki',
        skills: ['Diagnostyka', 'Naprawa', 'Elektronika', 'Hydraulika'],
        personality: ['techniczny', 'rozwiązujący problemy', 'fizyczny'],
        realTasks: [
          'Wymień olej i filtry',
          'Sprawdź stan hamulców',
          'Diagnozuj błąd silnika'
        ]
      },

      // Gastronomia
      chef: {
        id: 'chef',
        name: 'Kucharz',
        icon: '👨‍🍳',
        category: 'gastronomy',
        avgSalary: '3000-7000 PLN',
        timeToLearn: '3-12 miesięcy',
        remoteWork: 5,
        difficulty: 3,
        demand: 'wysoki',
        skills: ['Gotowanie', 'Planowanie menu', 'HACCP', 'Kreatywność'],
        personality: ['kreatywny', 'odporny na stres', 'zorganizowany'],
        realTasks: [
          'Przygotuj 3-daniowe menu',
          'Skalkuluj koszt potrawy',
          'Naucz się 5 nowych technik'
        ]
      },
      barista: {
        id: 'barista',
        name: 'Barista',
        icon: '☕',
        category: 'gastronomy',
        avgSalary: '2800-4500 PLN',
        timeToLearn: '1-3 miesięcy',
        remoteWork: 0,
        difficulty: 2,
        demand: 'średni',
        skills: ['Kawa', 'Latte art', 'Obsługa klienta', 'Higiena'],
        personality: ['towarzyski', 'energiczny', 'dokładny'],
        realTasks: [
          'Przygotuj 5 rodzajów kawy',
          'Stwórz latte art',
          'Zaproponuj nowe menu'
        ]
      },

      // Usługi
      hairdresser: {
        id: 'hairdresser',
        name: 'Fryzjer',
        icon: '💇',
        category: 'services',
        avgSalary: '2800-6000 PLN',
        timeToLearn: '6-12 miesięcy',
        remoteWork: 0,
        difficulty: 3,
        demand: 'średni',
        skills: ['Strzyżenie', 'Koloryzacja', 'Stylizacja', 'Obsługa klienta'],
        personality: ['kreatywny', 'komunikatywny', 'manualny'],
        realTasks: [
          'Wykonaj 3 różne fryzury',
          'Dobierz kolor do karnacji',
          'Stwórz portfolio stylizacji'
        ]
      },

      // Transport i logistyka
      driver: {
        id: 'driver',
        name: 'Kierowca zawodowy',
        icon: '🚛',
        category: 'transport',
        avgSalary: '4000-8000 PLN',
        timeToLearn: '2-6 miesięcy',
        remoteWork: 0,
        difficulty: 2,
        demand: 'bardzo wysoki',
        skills: ['Prowadzenie', 'Planowanie tras', 'Dokumentacja', 'Mechanika'],
        personality: ['odpowiedzialny', 'samodzielny', 'odporny'],
        realTasks: [
          'Zaplanuj trasę dostawy',
          'Sprawdź stan pojazdu',
          'Wypełnij dokumenty CMR'
        ],
        certification: 'Prawo jazdy C+E'
      },

      // Opieka i zdrowie
      caregiver: {
        id: 'caregiver',
        name: 'Opiekun medyczny',
        icon: '🤲',
        category: 'healthcare',
        avgSalary: '3000-5000 PLN',
        timeToLearn: '3-6 miesięcy',
        remoteWork: 10,
        difficulty: 3,
        demand: 'bardzo wysoki',
        skills: ['Pierwsza pomoc', 'Higiena', 'Komunikacja', 'Empatia'],
        personality: ['empatyczny', 'cierpliwy', 'odpowiedzialny'],
        realTasks: [
          'Przygotuj plan opieki',
          'Naucz się podstaw pierwszej pomocy',
          'Prowadź dokumentację medyczną'
        ]
      }
    };
  }

  // Analizuj preferencje użytkownika
  analyzeUserPreferences(userData) {
    const {
      interests,
      workStyle,
      salary,
      timeCommitment,
      personality,
      goals,
      currentSkills,
      location
    } = userData;

    let recommendations = [];

    // Filtruj według preferencji pracy
    Object.values(this.careerPaths).forEach(career => {
      let score = 0;

      // Praca zdalna
      if (workStyle.includes('remote') && career.remoteWork > 70) score += 20;
      if (workStyle.includes('office') && career.remoteWork < 30) score += 15;
      
      // Zainteresowania
      if (interests.some(i => career.category === i)) score += 25;
      
      // Osobowość
      const personalityMatch = personality.filter(p => 
        career.personality.includes(p)
      ).length;
      score += personalityMatch * 10;

      // Czas nauki
      if (timeCommitment === 'fast' && career.timeToLearn.includes('1-3')) score += 15;
      if (timeCommitment === 'medium' && career.timeToLearn.includes('6-12')) score += 15;
      
      // Zapotrzebowanie na rynku
      if (career.demand === 'bardzo wysoki') score += 20;
      
      // Cele
      if (goals.includes('wysokie zarobki') && parseInt(career.avgSalary.split('-')[1]) > 10000) {
        score += 15;
      }
      if (goals.includes('work-life balance') && career.difficulty <= 3) {
        score += 10;
      }
      if (goals.includes('własny biznes') && ['photographer', 'graphicDesigner', 'hairdresser', 'chef'].includes(career.id)) {
        score += 15;
      }

      recommendations.push({
        ...career,
        matchScore: score,
        matchPercentage: Math.min(Math.round(score * 1.2), 100)
      });
    });

    return recommendations
      .sort((a, b) => b.matchScore - a.matchScore)
      .slice(0, 5);
  }

  // Generuj spersonalizowane zadania
  generatePersonalizedTasks(careerPath, userLevel) {
    const baseTasks = this.careerPaths[careerPath].realTasks;
    const difficulty = userLevel === 'beginner' ? 0.7 : userLevel === 'advanced' ? 1.3 : 1;
    
    return baseTasks.map(task => ({
      title: task,
      difficulty: Math.round(this.careerPaths[careerPath].difficulty * difficulty),
      xpReward: Math.round(100 * difficulty),
      realWorld: true,
      type: this.getTaskType(careerPath)
    }));
  }

  getTaskType(careerPath) {
    const career = this.careerPaths[careerPath];
    if (['tech'].includes(career.category)) return 'project';
    if (['creative'].includes(career.category)) return 'portfolio';
    if (['practical', 'transport'].includes(career.category)) return 'practice';
    if (['gastronomy', 'services'].includes(career.category)) return 'service';
    if (['healthcare'].includes(career.category)) return 'care';
    return 'general';
  }
}

// ============================================
// ONBOARDING - PERSONALIZACJA
// ============================================
const PersonalizationOnboarding = ({ onComplete }) => {
  const [step, setStep] = useState(0);
  const [userData, setUserData] = useState({
    name: '',
    interests: [],
    personality: [],
    workStyle: [],
    goals: [],
    timeCommitment: '',
    salary: '',
    currentSkills: [],
    location: 'city'
  });

  const steps = [
    {
      id: 'welcome',
      title: 'Cześć! Kim jesteś?',
      subtitle: 'Pomożemy Ci znaleźć idealną ścieżkę kariery'
    },
    {
      id: 'interests',
      title: 'Co Cię interesuje?',
      subtitle: 'Wybierz obszary, które Cię fascynują'
    },
    {
      id: 'personality',
      title: 'Jaki jesteś?',
      subtitle: 'Pomóż nam lepiej Cię poznać'
    },
    {
      id: 'workStyle',
      title: 'Jak lubisz pracować?',
      subtitle: 'Twój idealny styl pracy'
    },
    {
      id: 'goals',
      title: 'Jakie masz cele?',
      subtitle: 'Co chcesz osiągnąć?'
    },
    {
      id: 'time',
      title: 'Ile masz czasu?',
      subtitle: 'Jak szybko chcesz zdobyć nowy zawód?'
    }
  ];

  const interestOptions = [
    { id: 'tech', label: 'Technologia', icon: Code, color: 'blue' },
    { id: 'creative', label: 'Kreatywność', icon: Palette, color: 'purple' },
    { id: 'practical', label: 'Praca manualna', icon: Wrench, color: 'orange' },
    { id: 'gastronomy', label: 'Gastronomia', icon: Utensils, color: 'green' },
    { id: 'services', label: 'Usługi', icon: Scissors, color: 'pink' },
    { id: 'transport', label: 'Transport', icon: Truck, color: 'yellow' },
    { id: 'healthcare', label: 'Opieka', icon: HeartHandshake, color: 'red' }
  ];

  const personalityOptions = [
    { id: 'kreatywny', label: 'Kreatywny', icon: Sparkles },
    { id: 'analityczny', label: 'Analityczny', icon: Target },
    { id: 'towarzyski', label: 'Towarzyski', icon: Users },
    { id: 'dokładny', label: 'Dokładny', icon: CheckCircle },
    { id: 'empatyczny', label: 'Empatyczny', icon: Heart },
    { id: 'techniczny', label: 'Techniczny', icon: Wrench },
    { id: 'zorganizowany', label: 'Zorganizowany', icon: Calendar },
    { id: 'elastyczny', label: 'Elastyczny', icon: TrendingUp }
  ];

  const workStyleOptions = [
    { id: 'remote', label: 'Praca zdalna', icon: Home },
    { id: 'office', label: 'W biurze', icon: Building },
    { id: 'field', label: 'W terenie', icon: MapPin },
    { id: 'flexible', label: 'Elastyczne godziny', icon: Clock },
    { id: 'team', label: 'W zespole', icon: Users },
    { id: 'solo', label: 'Samodzielnie', icon: User }
  ];

  const goalOptions = [
    { id: 'wysokie zarobki', label: 'Wysokie zarobki', icon: DollarSign },
    { id: 'work-life balance', label: 'Work-life balance', icon: Heart },
    { id: 'własny biznes', label: 'Własny biznes', icon: Briefcase },
    { id: 'rozwój', label: 'Ciągły rozwój', icon: TrendingUp },
    { id: 'stabilność', label: 'Stabilność', icon: Shield },
    { id: 'podróże', label: 'Podróże', icon: Globe }
  ];

  const handleNext = () => {
    if (step < steps.length - 1) {
      setStep(step + 1);
    } else {
      onComplete(userData);
    }
  };

  const handleSelect = (field, value, multiSelect = false) => {
    if (multiSelect) {
      setUserData(prev => ({
        ...prev,
        [field]: prev[field].includes(value) 
          ? prev[field].filter(v => v !== value)
          : [...prev[field], value]
      }));
    } else {
      setUserData(prev => ({ ...prev, [field]: value }));
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full p-8">
        {/* Progress */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm text-gray-600">Krok {step + 1} z {steps.length}</span>
            <span className="text-sm font-medium text-blue-600">
              {Math.round(((step + 1) / steps.length) * 100)}% ukończone
            </span>
          </div>
          <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
            <div 
              className="h-full bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-500"
              style={{ width: `${((step + 1) / steps.length) * 100}%` }}
            />
          </div>
        </div>

        {/* Current Step */}
        <div className="mb-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-2">
            {steps[step].title}
          </h2>
          <p className="text-gray-600">
            Na podstawie Twoich preferencji znaleźliśmy idealne ścieżki kariery dla Ciebie!
          </p>
        </div>

        {/* Recommendations Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {recommendations.map((career, index) => (
            <div
              key={career.id}
              className={`
                bg-white rounded-xl shadow-lg overflow-hidden cursor-pointer
                transform transition-all duration-300 hover:scale-105
                ${index === 0 ? 'ring-4 ring-yellow-400 ring-opacity-50' : ''}
              `}
              onClick={() => setSelectedCareer(career)}
            >
              {/* Match Badge */}
              {index === 0 && (
                <div className="bg-gradient-to-r from-yellow-400 to-yellow-500 text-white px-4 py-2 text-center">
                  <span className="font-bold text-sm">⭐ NAJLEPSZE DOPASOWANIE</span>
                </div>
              )}
              
              {/* Career Info */}
              <div className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <span className="text-4xl">{career.icon}</span>
                    <h3 className="text-xl font-bold text-gray-900 mt-2">
                      {career.name}
                    </h3>
                  </div>
                  <div className="text-right">
                    <div className="text-3xl font-bold text-green-600">
                      {career.matchPercentage}%
                    </div>
                    <div className="text-xs text-gray-500">dopasowanie</div>
                  </div>
                </div>

                {/* Quick Stats */}
                <div className="space-y-2 mb-4">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">💰 Zarobki:</span>
                    <span className="font-medium">{career.avgSalary}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">⏱️ Czas nauki:</span>
                    <span className="font-medium">{career.timeToLearn}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">📊 Zapotrzebowanie:</span>
                    <span className={`font-medium ${
                      career.demand === 'bardzo wysoki' ? 'text-green-600' : 
                      career.demand === 'wysoki' ? 'text-blue-600' : 'text-gray-600'
                    }`}>
                      {career.demand}
                    </span>
                  </div>
                  {career.remoteWork > 0 && (
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">🏠 Praca zdalna:</span>
                      <span className="font-medium">{career.remoteWork}%</span>
                    </div>
                  )}
                </div>

                {/* Skills Preview */}
                <div className="flex flex-wrap gap-2 mb-4">
                  {career.skills.slice(0, 3).map(skill => (
                    <span 
                      key={skill}
                      className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full"
                    >
                      {skill}
                    </span>
                  ))}
                  {career.skills.length > 3 && (
                    <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                      +{career.skills.length - 3}
                    </span>
                  )}
                </div>

                <button className="w-full py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all">
                  Zobacz szczegóły →
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Selected Career Details */}
        {selectedCareer && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              {/* Header */}
              <div className="sticky top-0 bg-white border-b border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <span className="text-5xl">{selectedCareer.icon}</span>
                    <div>
                      <h2 className="text-2xl font-bold text-gray-900">
                        {selectedCareer.name}
                      </h2>
                      <p className="text-gray-600">
                        {selectedCareer.matchPercentage}% dopasowania do Twoich preferencji
                      </p>
                    </div>
                  </div>
                  <button
                    onClick={() => setSelectedCareer(null)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <X className="w-6 h-6" />
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="p-6">
                {/* Key Info */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-green-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-gray-600">Średnie zarobki</span>
                      <DollarSign className="w-5 h-5 text-green-600" />
                    </div>
                    <p className="text-xl font-bold text-gray-900">{selectedCareer.avgSalary}</p>
                  </div>
                  <div className="bg-blue-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-gray-600">Czas nauki</span>
                      <Clock className="w-5 h-5 text-blue-600" />
                    </div>
                    <p className="text-xl font-bold text-gray-900">{selectedCareer.timeToLearn}</p>
                  </div>
                  <div className="bg-purple-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-gray-600">Poziom trudności</span>
                      <Target className="w-5 h-5 text-purple-600" />
                    </div>
                    <div className="flex space-x-1">
                      {[...Array(5)].map((_, i) => (
                        <div
                          key={i}
                          className={`w-8 h-2 rounded-full ${
                            i < selectedCareer.difficulty 
                              ? 'bg-purple-600' 
                              : 'bg-gray-300'
                          }`}
                        />
                      ))}
                    </div>
                  </div>
                </div>

                {/* Skills Required */}
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-3">Wymagane umiejętności</h3>
                  <div className="flex flex-wrap gap-2">
                    {selectedCareer.skills.map(skill => (
                      <span 
                        key={skill}
                        className="px-3 py-2 bg-blue-100 text-blue-700 rounded-lg font-medium"
                      >
                        {skill}
                      </span>
                    ))}
                  </div>
                </div>

                {/* Personality Match */}
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-3">Idealny profil osobowości</h3>
                  <div className="flex flex-wrap gap-2">
                    {selectedCareer.personality.map(trait => (
                      <span 
                        key={trait}
                        className={`
                          px-3 py-2 rounded-lg font-medium
                          ${userData.personality.includes(trait)
                            ? 'bg-green-100 text-green-700 ring-2 ring-green-500'
                            : 'bg-gray-100 text-gray-700'
                          }
                        `}
                      >
                        {userData.personality.includes(trait) && '✓ '}
                        {trait}
                      </span>
                    ))}
                  </div>
                </div>

                {/* Real Tasks */}
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-3">
                    Praktyczne zadania do wykonania
                  </h3>
                  <div className="space-y-3">
                    {selectedCareer.realTasks.map((task, index) => (
                      <div
                        key={index}
                        className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
                      >
                        <div className="w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center font-semibold text-sm">
                          {index + 1}
                        </div>
                        <p className="flex-1 text-gray-700">{task}</p>
                        <Zap className="w-4 h-4 text-yellow-500" />
                        <span className="text-sm font-medium text-gray-600">+100 XP</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Certification Info */}
                {selectedCareer.certification && (
                  <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <div className="flex items-start space-x-3">
                      <Award className="w-5 h-5 text-yellow-600 mt-0.5" />
                      <div>
                        <p className="font-semibold text-gray-900">Certyfikacja</p>
                        <p className="text-sm text-gray-700 mt-1">
                          {selectedCareer.certification}
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                {/* CTA */}
                <div className="flex space-x-4">
                  <button className="flex-1 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all">
                    Rozpocznij tę ścieżkę kariery
                  </button>
                  <button className="px-6 py-3 bg-gray-100 text-gray-700 rounded-lg font-medium hover:bg-gray-200 transition-colors">
                    Zapisz na później
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// ============================================
// PRACTICAL MISSIONS SYSTEM
// ============================================
const PracticalMissions = ({ careerPath, userLevel }) => {
  const [activeMissions, setActiveMissions] = useState([]);
  const [completedMissions, setCompletedMissions] = useState([]);
  const [uploadedProof, setUploadedProof] = useState(null);

  const missions = {
    photographer: [
      {
        id: 'portrait-session',
        title: 'Sesja portretowa',
        description: 'Wykonaj sesję zdjęciową 3 różnych osób w naturalnym świetle',
        requirements: [
          'Minimum 5 zdjęć każdej osoby',
          'Różne ujęcia (portret, półpostać)',
          'Naturalne światło (okno lub plener)'
        ],
        xpReward: 200,
        proofType: 'photos',
        realWorld: true
      },
      {
        id: 'product-photography',
        title: 'Fotografia produktowa',
        description: 'Sfotografuj 5 produktów na białym tle',
        requirements: [
          'Białe lub jednolite tło',
          'Dobre oświetlenie',
          'Różne kąty każdego produktu'
        ],
        xpReward: 150,
        proofType: 'photos',
        realWorld: true
      }
    ],
    electrician: [
      {
        id: 'home-inspection',
        title: 'Inspekcja domowa',
        description: 'Sprawdź bezpieczeństwo instalacji w swoim mieszkaniu',
        requirements: [
          'Sprawdź wszystkie gniazdka',
          'Przetestuj bezpieczniki',
          'Zrób dokumentację zdjęciową'
        ],
        xpReward: 150,
        proofType: 'checklist',
        realWorld: true
      },
      {
        id: 'wiring-diagram',
        title: 'Schemat instalacji',
        description: 'Narysuj schemat elektryczny jednego pomieszczenia',
        requirements: [
          'Oznacz wszystkie gniazdka',
          'Zaznacz oświetlenie',
          'Dodaj tablicę rozdzielczą'
        ],
        xpReward: 200,
        proofType: 'document',
        realWorld: true
      }
    ],
    chef: [
      {
        id: 'three-course-meal',
        title: 'Menu 3-daniowe',
        description: 'Przygotuj kompletny obiad: przystawka, danie główne, deser',
        requirements: [
          'Zrób zdjęcia każdego dania',
          'Spisz przepisy',
          'Oblicz koszt składników'
        ],
        xpReward: 250,
        proofType: 'photos',
        realWorld: true
      },
      {
        id: 'meal-prep',
        title: 'Meal prep na tydzień',
        description: 'Przygotuj 5 posiłków na kolejne dni',
        requirements: [
          'Zrównoważone posiłki',
          'Lista zakupów',
          'Instrukcja przechowywania'
        ],
        xpReward: 200,
        proofType: 'photos',
        realWorld: true
      }
    ]
  };

  const handleUploadProof = (missionId, file) => {
    setUploadedProof({ missionId, file });
    // Symulacja weryfikacji
    setTimeout(() => {
      completeMission(missionId);
    }, 2000);
  };

  const completeMission = (missionId) => {
    const mission = activeMissions.find(m => m.id === missionId);
    if (mission) {
      setCompletedMissions([...completedMissions, mission]);
      setActiveMissions(activeMissions.filter(m => m.id !== missionId));
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Praktyczne Misje 🎯
        </h2>
        <p className="text-gray-600">
          Wykonaj prawdziwe zadania i zdobądź doświadczenie w swoim nowym zawodzie!
        </p>
      </div>

      {/* Active Missions */}
      <div className="space-y-4">
        {(missions[careerPath] || missions.chef).map(mission => (
          <div 
            key={mission.id}
            className="bg-white rounded-xl shadow-lg overflow-hidden"
          >
            <div className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h3 className="text-lg font-bold text-gray-900 mb-1">
                    {mission.title}
                  </h3>
                  <p className="text-gray-600">{mission.description}</p>
                </div>
                <div className="text-right">
                  <div className="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm font-semibold">
                    +{mission.xpReward} XP
                  </div>
                  {mission.realWorld && (
                    <div className="mt-2 text-xs text-green-600 font-medium">
                      ✓ Real World
                    </div>
                  )}
                </div>
              </div>

              {/* Requirements */}
              <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                <p className="text-sm font-semibold text-gray-700 mb-2">Wymagania:</p>
                <ul className="space-y-1">
                  {mission.requirements.map((req, index) => (
                    <li key={index} className="text-sm text-gray-600 flex items-start">
                      <CheckCircle className="w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                      {req}
                    </li>
                  ))}
                </ul>
              </div>

              {/* Upload Proof */}
              <div className="flex items-center space-x-3">
                <label className="flex-1">
                  <input
                    type="file"
                    className="hidden"
                    accept={mission.proofType === 'photos' ? 'image/*' : '*'}
                    onChange={(e) => handleUploadProof(mission.id, e.target.files[0])}
                  />
                  <div className="w-full py-3 px-4 bg-blue-50 text-blue-700 rounded-lg font-medium text-center hover:bg-blue-100 transition-colors cursor-pointer flex items-center justify-center">
                    <Upload className="w-5 h-5 mr-2" />
                    Prześlij dowód wykonania
                  </div>
                </label>
                
                <button className="px-4 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                  <HelpCircle className="w-5 h-5" />
                </button>
              </div>

              {/* Upload Status */}
              {uploadedProof?.missionId === mission.id && (
                <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <p className="text-sm text-green-700 font-medium">
                    ✓ Przesłano! Weryfikujemy Twoje zadanie...
                  </p>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// ============================================
// MAIN DEMO COMPONENT
// ============================================
const CareerPersonalizationSystem = () => {
  const [stage, setStage] = useState('onboarding'); // onboarding | recommendations | missions
  const [userData, setUserData] = useState(null);
  const [recommendations, setRecommendations] = useState([]);
  const [selectedCareerPath, setSelectedCareerPath] = useState(null);

  const advisor = new CareerAdvisorEngine();

  const handleOnboardingComplete = (data) => {
    setUserData(data);
    const recs = advisor.analyzeUserPreferences(data);
    setRecommendations(recs);
    setStage('recommendations');
  };

  const handleSelectCareer = (careerId) => {
    setSelectedCareerPath(careerId);
    setStage('missions');
  };

  return (
    <div>
      {stage === 'onboarding' && (
        <PersonalizationOnboarding onComplete={handleOnboardingComplete} />
      )}
      
      {stage === 'recommendations' && userData && (
        <CareerRecommendations 
          userData={userData} 
          recommendations={recommendations}
        />
      )}
      
      {stage === 'missions' && selectedCareerPath && (
        <PracticalMissions 
          careerPath={selectedCareerPath}
          userLevel="beginner"
        />
      )}
    </div>
  );
};

export default CareerPersonalizationSystem;600">
            {steps[step].subtitle}
          </p>
        </div>

        {/* Step Content */}
        <div className="mb-8">
          {step === 0 && (
            <div className="space-y-4">
              <input
                type="text"
                placeholder="Jak masz na imię?"
                value={userData.name}
                onChange={(e) => setUserData(prev => ({ ...prev, name: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div className="grid grid-cols-2 gap-4">
                <button
                  onClick={() => handleSelect('location', 'city')}
                  className={`p-4 rounded-lg border-2 transition-all ${
                    userData.location === 'city' 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <Building className="w-8 h-8 mx-auto mb-2 text-gray-700" />
                  <span className="font-medium">Miasto</span>
                </button>
                <button
                  onClick={() => handleSelect('location', 'rural')}
                  className={`p-4 rounded-lg border-2 transition-all ${
                    userData.location === 'rural' 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <Mountain className="w-8 h-8 mx-auto mb-2 text-gray-700" />
                  <span className="font-medium">Wieś/Małe miasto</span>
                </button>
              </div>
            </div>
          )}

          {step === 1 && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {interestOptions.map(option => {
                const Icon = option.icon;
                const isSelected = userData.interests.includes(option.id);
                
                // Determine colors based on option
                let borderColor = 'border-gray-200';
                let bgColor = 'bg-white';
                let iconColor = 'text-gray-600';
                
                if (isSelected) {
                  switch(option.color) {
                    case 'blue':
                      borderColor = 'border-blue-500';
                      bgColor = 'bg-blue-50';
                      iconColor = 'text-blue-600';
                      break;
                    case 'purple':
                      borderColor = 'border-purple-500';
                      bgColor = 'bg-purple-50';
                      iconColor = 'text-purple-600';
                      break;
                    case 'orange':
                      borderColor = 'border-orange-500';
                      bgColor = 'bg-orange-50';
                      iconColor = 'text-orange-600';
                      break;
                    case 'green':
                      borderColor = 'border-green-500';
                      bgColor = 'bg-green-50';
                      iconColor = 'text-green-600';
                      break;
                    case 'pink':
                      borderColor = 'border-pink-500';
                      bgColor = 'bg-pink-50';
                      iconColor = 'text-pink-600';
                      break;
                    case 'yellow':
                      borderColor = 'border-yellow-500';
                      bgColor = 'bg-yellow-50';
                      iconColor = 'text-yellow-600';
                      break;
                    case 'red':
                      borderColor = 'border-red-500';
                      bgColor = 'bg-red-50';
                      iconColor = 'text-red-600';
                      break;
                    default:
                      borderColor = 'border-blue-500';
                      bgColor = 'bg-blue-50';
                      iconColor = 'text-blue-600';
                  }
                }
                
                return (
                  <button
                    key={option.id}
                    onClick={() => handleSelect('interests', option.id, true)}
                    className={`
                      p-4 rounded-xl border-2 transition-all transform hover:scale-105
                      ${borderColor} ${bgColor} ${!isSelected && 'hover:border-gray-300'}
                    `}
                  >
                    <Icon className={`w-8 h-8 mx-auto mb-2 ${iconColor}`} />
                    <span className="font-medium text-sm">{option.label}</span>
                  </button>
                );
              })}
            </div>
          )}

          {step === 2 && (
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {personalityOptions.map(option => {
                const Icon = option.icon;
                const isSelected = userData.personality.includes(option.id);
                
                return (
                  <button
                    key={option.id}
                    onClick={() => handleSelect('personality', option.id, true)}
                    className={`
                      p-3 rounded-lg border-2 transition-all
                      ${isSelected 
                        ? 'border-purple-500 bg-purple-50' 
                        : 'border-gray-200 hover:border-gray-300'
                      }
                    `}
                  >
                    <Icon className={`w-6 h-6 mx-auto mb-1 ${
                      isSelected ? 'text-purple-600' : 'text-gray-600'
                    }`} />
                    <span className="text-xs font-medium">{option.label}</span>
                  </button>
                );
              })}
            </div>
          )}

          {step === 3 && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {workStyleOptions.map(option => {
                const Icon = option.icon;
                const isSelected = userData.workStyle.includes(option.id);
                
                return (
                  <button
                    key={option.id}
                    onClick={() => handleSelect('workStyle', option.id, true)}
                    className={`
                      p-4 rounded-lg border-2 transition-all
                      ${isSelected 
                        ? 'border-green-500 bg-green-50' 
                        : 'border-gray-200 hover:border-gray-300'
                      }
                    `}
                  >
                    <Icon className={`w-7 h-7 mx-auto mb-2 ${
                      isSelected ? 'text-green-600' : 'text-gray-600'
                    }`} />
                    <span className="text-sm font-medium">{option.label}</span>
                  </button>
                );
              })}
            </div>
          )}

          {step === 4 && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {goalOptions.map(option => {
                const Icon = option.icon;
                const isSelected = userData.goals.includes(option.id);
                
                return (
                  <button
                    key={option.id}
                    onClick={() => handleSelect('goals', option.id, true)}
                    className={`
                      p-4 rounded-lg border-2 transition-all
                      ${isSelected 
                        ? 'border-orange-500 bg-orange-50' 
                        : 'border-gray-200 hover:border-gray-300'
                      }
                    `}
                  >
                    <Icon className={`w-7 h-7 mx-auto mb-2 ${
                      isSelected ? 'text-orange-600' : 'text-gray-600'
                    }`} />
                    <span className="text-sm font-medium">{option.label}</span>
                  </button>
                );
              })}
            </div>
          )}

          {step === 5 && (
            <div className="grid grid-cols-3 gap-4">
              {[
                { id: 'fast', label: '1-3 miesiące', desc: 'Szybki start', icon: Zap },
                { id: 'medium', label: '6-12 miesięcy', desc: 'Solidne podstawy', icon: Target },
                { id: 'long', label: '1-2 lata', desc: 'Ekspert', icon: Award }
              ].map(option => {
                const Icon = option.icon;
                const isSelected = userData.timeCommitment === option.id;
                
                return (
                  <button
                    key={option.id}
                    onClick={() => handleSelect('timeCommitment', option.id)}
                    className={`
                      p-6 rounded-xl border-2 transition-all
                      ${isSelected 
                        ? 'border-blue-500 bg-blue-50 scale-105' 
                        : 'border-gray-200 hover:border-gray-300'
                      }
                    `}
                  >
                    <Icon className={`w-10 h-10 mx-auto mb-3 ${
                      isSelected ? 'text-blue-600' : 'text-gray-600'
                    }`} />
                    <p className="font-semibold">{option.label}</p>
                    <p className="text-xs text-gray-600 mt-1">{option.desc}</p>
                  </button>
                );
              })}
            </div>
          )}
        </div>

        {/* Navigation */}
        <div className="flex justify-between">
          <button
            onClick={() => step > 0 && setStep(step - 1)}
            className={`px-6 py-3 rounded-lg font-medium transition-all ${
              step === 0 
                ? 'invisible' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
          >
            Wstecz
          </button>
          
          <button
            onClick={handleNext}
            disabled={step === 0 && !userData.name}
            className="px-8 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {step === steps.length - 1 ? 'Zobacz rekomendacje' : 'Dalej'}
            <ChevronRight className="inline w-5 h-5 ml-2" />
          </button>
        </div>
      </div>
    </div>
  );
};

// ============================================
// CAREER RECOMMENDATIONS
// ============================================
const CareerRecommendations = ({ userData, recommendations }) => {
  const [selectedCareer, setSelectedCareer] = useState(null);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Cześć {userData.name}! Oto Twoje rekomendacje 🎯
          </h1>
          <p className="text-gray-
