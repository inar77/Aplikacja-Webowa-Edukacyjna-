// components/Chests/ChestSystem.jsx
import React, { useState, useEffect } from 'react';
import { 
  Lock, 
  Unlock, 
  Clock, 
  Zap, 
  Gift,
  Sparkles,
  Timer,
  TrendingUp,
  Coins,
  Star,
  Trophy,
  X
} from 'lucide-react';
import { useApp } from '../../contexts/AppContext';

const ChestSystem = () => {
  const { user, addXP, addCoins, showToast, unlockAchievement } = useApp();
  
  const [chests, setChests] = useState([
    { id: 1, type: 'silver', status: 'locked', unlockTime: null, position: 0 },
    { id: 2, type: 'empty', status: 'empty', unlockTime: null, position: 1 },
    { id: 3, type: 'empty', status: 'empty', unlockTime: null, position: 2 },
    { id: 4, type: 'empty', status: 'empty', unlockTime: null, position: 3 }
  ]);
  
  const [isExpanded, setIsExpanded] = useState(false);
  const [openingChest, setOpeningChest] = useState(null);
  const [rewards, setRewards] = useState(null);
  const [timeRemaining, setTimeRemaining] = useState({});

  // Chest types configuration
  const chestTypes = {
    wooden: {
      name: 'Drewniana Skrzynia',
      unlockTime: 15, // seconds for demo (normally 3 hours)
      color: 'from-amber-600 to-amber-800',
      icon: 'üì¶',
      rewards: {
        xp: { min: 10, max: 30 },
        coins: { min: 5, max: 15 },
        items: ['common']
      }
    },
    silver: {
      name: 'Srebrna Skrzynia',
      unlockTime: 30, // seconds for demo (normally 8 hours)
      color: 'from-gray-400 to-gray-600',
      icon: 'ü•à',
      rewards: {
        xp: { min: 30, max: 60 },
        coins: { min: 15, max: 30 },
        items: ['common', 'rare']
      }
    },
    golden: {
      name: 'Z≈Çota Skrzynia',
      unlockTime: 60, // seconds for demo (normally 12 hours)
      color: 'from-yellow-400 to-yellow-600',
      icon: 'üèÜ',
      rewards: {
        xp: { min: 60, max: 120 },
        coins: { min: 30, max: 60 },
        items: ['rare', 'epic']
      }
    },
    magical: {
      name: 'Magiczna Skrzynia',
      unlockTime: 90, // seconds for demo (normally 24 hours)
      color: 'from-purple-500 to-pink-500',
      icon: '‚ú®',
      rewards: {
        xp: { min: 100, max: 200 },
        coins: { min: 50, max: 100 },
        items: ['rare', 'epic', 'legendary']
      }
    },
    legendary: {
      name: 'Legendarna Skrzynia',
      unlockTime: 120, // seconds for demo
      color: 'from-orange-500 via-red-500 to-purple-600',
      icon: 'üëë',
      rewards: {
        xp: { min: 200, max: 500 },
        coins: { min: 100, max: 250 },
        items: ['epic', 'legendary']
      }
    }
  };

  const items = {
    common: [
      { name: 'Booster XP (1h)', icon: '‚ö°', description: '+50% XP przez 1 godzinƒô', rarity: 'common' },
      { name: 'Podpowied≈∫', icon: 'üí°', description: '3x podpowiedzi do zada≈Ñ', rarity: 'common' }
    ],
    rare: [
      { name: 'Streak Shield', icon: 'üõ°Ô∏è', description: 'Ochrona serii na 1 dzie≈Ñ', rarity: 'rare' },
      { name: 'Booster XP (3h)', icon: '‚ö°', description: '+100% XP przez 3 godziny', rarity: 'rare' }
    ],
    epic: [
      { name: 'Mega Booster', icon: 'üöÄ', description: '+200% XP przez 6 godzin', rarity: 'epic' },
      { name: 'Instant Level', icon: 'üìà', description: 'Natychmiastowy awans o 1 poziom', rarity: 'epic' }
    ],
    legendary: [
      { name: 'Golden Week', icon: 'üåü', description: '+300% XP przez 7 dni', rarity: 'legendary' },
      { name: 'Master Key', icon: 'üóùÔ∏è', description: 'Odblokuj dowolny kurs', rarity: 'legendary' }
    ]
  };

  // Load chests from localStorage
  useEffect(() => {
    const savedChests = localStorage.getItem('userChests');
    if (savedChests) {
      setChests(JSON.parse(savedChests));
    }
  }, []);

  // Save chests to localStorage
  useEffect(() => {
    localStorage.setItem('userChests', JSON.stringify(chests));
  }, [chests]);

  // Timer countdown
  useEffect(() => {
    const interval = setInterval(() => {
      const newTimeRemaining = {};
      let hasUnlocking = false;
      
      chests.forEach(chest => {
        if (chest.status === 'unlocking' && chest.unlockTime) {
          const now = Date.now();
          const remaining = Math.max(0, chest.unlockTime - now);
          
          if (remaining === 0) {
            // Chest is ready
            setChests(prev => prev.map(c => 
              c.id === chest.id ? { ...c, status: 'ready' } : c
            ));
            showToast(`${chestTypes[chest.type].name} jest gotowa do otwarcia!`, 'success');
          } else {
            hasUnlocking = true;
            const seconds = Math.floor(remaining / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            
            newTimeRemaining[chest.id] = {
              hours: hours,
              minutes: minutes % 60,
              seconds: seconds % 60,
              display: hours > 0 ? `${hours}h ${minutes % 60}m` : 
                      minutes > 0 ? `${minutes}m ${seconds % 60}s` : 
                      `${seconds}s`
            };
          }
        }
      });
      
      setTimeRemaining(newTimeRemaining);
    }, 1000);
    
    return () => clearInterval(interval);
  }, [chests]);

  const addNewChest = (type = null) => {
    const emptySlot = chests.find(c => c.status === 'empty');
    if (!emptySlot) {
      showToast('Brak wolnych slot√≥w na skrzynie!', 'warning');
      return;
    }

    // Random chest type if not specified
    if (!type) {
      const random = Math.random();
      if (random < 0.4) type = 'wooden';
      else if (random < 0.7) type = 'silver';
      else if (random < 0.9) type = 'golden';
      else if (random < 0.98) type = 'magical';
      else type = 'legendary';
    }

    setChests(prev => prev.map(c => 
      c.id === emptySlot.id 
        ? { ...c, type, status: 'locked', unlockTime: null }
        : c
    ));
    
    showToast(`Otrzyma≈Çe≈õ ${chestTypes[type].name}!`, 'success');
  };

  const startUnlocking = (chestId) => {
    const chest = chests.find(c => c.id === chestId);
    if (!chest || chest.status !== 'locked') return;

    // Check if another chest is already unlocking
    const unlockingChest = chests.find(c => c.status === 'unlocking');
    if (unlockingChest) {
      showToast('Mo≈ºesz odblokowywaƒá tylko jednƒÖ skrzyniƒô naraz!', 'warning');
      return;
    }

    const unlockDuration = chestTypes[chest.type].unlockTime * 1000; // Convert to milliseconds
    const unlockTime = Date.now() + unlockDuration;

    setChests(prev => prev.map(c => 
      c.id === chestId 
        ? { ...c, status: 'unlocking', unlockTime }
        : c
    ));
    
    showToast(`Rozpoczƒôto odblokowywanie ${chestTypes[chest.type].name}`, 'info');
  };

  const openChest = (chestId) => {
    const chest = chests.find(c => c.id === chestId);
    if (!chest || chest.status !== 'ready') return;

    setOpeningChest(chestId);
    
    // Generate rewards
    const chestType = chestTypes[chest.type];
    const xpReward = Math.floor(Math.random() * (chestType.rewards.xp.max - chestType.rewards.xp.min + 1)) + chestType.rewards.xp.min;
    const coinsReward = Math.floor(Math.random() * (chestType.rewards.coins.max - chestType.rewards.coins.min + 1)) + chestType.rewards.coins.min;
    
    // Random items
    const possibleItems = [];
    chestType.rewards.items.forEach(rarity => {
      possibleItems.push(...items[rarity]);
    });
    
    const numItems = Math.floor(Math.random() * 3) + 1; // 1-3 items
    const receivedItems = [];
    for (let i = 0; i < numItems && i < possibleItems.length; i++) {
      const randomItem = possibleItems[Math.floor(Math.random() * possibleItems.length)];
      receivedItems.push(randomItem);
    }

    const generatedRewards = {
      xp: xpReward,
      coins: coinsReward,
      items: receivedItems,
      chestType: chest.type
    };

    // Animate opening
    setTimeout(() => {
      setRewards(generatedRewards);
      
      // Apply rewards
      addXP(xpReward);
      addCoins(coinsReward);
      
      // Clear the chest slot
      setChests(prev => prev.map(c => 
        c.id === chestId 
          ? { ...c, type: 'empty', status: 'empty', unlockTime: null }
          : c
      ));
      
      // Achievement check
      const totalOpened = parseInt(localStorage.getItem('chestsOpened') || '0') + 1;
      localStorage.setItem('chestsOpened', totalOpened.toString());
      
      if (totalOpened === 1) {
        unlockAchievement('first_chest', 'Pierwszy Skarb', 'Otw√≥rz swojƒÖ pierwszƒÖ skrzyniƒô');
      } else if (totalOpened === 10) {
        unlockAchievement('chest_hunter', '≈Åowca Skarb√≥w', 'Otw√≥rz 10 skrzy≈Ñ');
      }
      
      setOpeningChest(null);
    }, 2000);
  };

  const speedUpUnlock = (chestId) => {
    const chest = chests.find(c => c.id === chestId);
    if (!chest || chest.status !== 'unlocking') return;

    const remainingTime = Math.max(0, chest.unlockTime - Date.now());
    const remainingMinutes = Math.ceil(remainingTime / 60000);
    const gemCost = Math.ceil(remainingMinutes / 10); // 1 gem per 10 minutes

    if (user.coins < gemCost * 10) { // Using coins instead of gems (10 coins = 1 gem)
      showToast(`Potrzebujesz ${gemCost * 10} monet do przyspieszenia!`, 'error');
      return;
    }

    // Deduct coins and unlock immediately
    addCoins(-gemCost * 10);
    setChests(prev => prev.map(c => 
      c.id === chestId 
        ? { ...c, status: 'ready', unlockTime: null }
        : c
    ));
    
    showToast('Skrzynia odblokowana natychmiast!', 'success');
  };

  const getRarityColor = (rarity) => {
    switch(rarity) {
      case 'common': return 'text-gray-600';
      case 'rare': return 'text-blue-600';
      case 'epic': return 'text-purple-600';
      case 'legendary': return 'text-orange-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <>
      {/* Chest Bar - Fixed at bottom */}
      <div className={`fixed bottom-0 left-0 right-0 bg-gradient-to-t from-gray-900 to-gray-800 text-white transition-all duration-300 z-40 ${
        isExpanded ? 'h-64' : 'h-20'
      }`}>
        {/* Toggle Button */}
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-6 py-2 rounded-t-lg hover:bg-gray-700 transition-colors"
        >
          <div className="flex items-center space-x-2">
            <Gift className="w-5 h-5" />
            <span className="font-medium">Skrzynie ({chests.filter(c => c.status !== 'empty').length}/4)</span>
            <span className={`transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}>‚ñº</span>
          </div>
        </button>

        {/* Main Chest Container */}
        <div className="h-full flex items-center justify-center px-4">
          <div className="w-full max-w-4xl">
            {/* Chest Slots */}
            <div className="grid grid-cols-4 gap-4">
              {chests.map((chest) => (
                <div key={chest.id} className="relative">
                  {chest.status === 'empty' ? (
                    // Empty Slot
                    <div className="aspect-square bg-gray-700 rounded-lg border-2 border-dashed border-gray-600 flex flex-col items-center justify-center cursor-pointer hover:bg-gray-600 transition-colors"
                         onClick={() => addNewChest()}>
                      <div className="text-gray-500 text-4xl mb-2">+</div>
                      {isExpanded && (
                        <p className="text-xs text-gray-400">Slot pusty</p>
                      )}
                    </div>
                  ) : (
                    // Chest
                    <div className={`aspect-square rounded-lg relative overflow-hidden cursor-pointer transform transition-all hover:scale-105 ${
                      chest.status === 'ready' ? 'animate-pulse' : ''
                    }`}
                         onClick={() => {
                           if (chest.status === 'locked') startUnlocking(chest.id);
                           else if (chest.status === 'ready') openChest(chest.id);
                         }}>
                      {/* Chest Background */}
                      <div className={`absolute inset-0 bg-gradient-to-br ${chestTypes[chest.type].color}`} />
                      
                      {/* Chest Icon */}
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-5xl">{chestTypes[chest.type].icon}</span>
                      </div>
                      
                      {/* Status Overlay */}
                      {chest.status === 'locked' && (
                        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                          <Lock className="w-8 h-8 text-white" />
                        </div>
                      )}
                      
                      {chest.status === 'unlocking' && (
                        <div className="absolute inset-0 bg-black bg-opacity-50 flex flex-col items-center justify-center">
                          <Clock className="w-6 h-6 text-white mb-1 animate-spin" />
                          <span className="text-white text-sm font-bold">
                            {timeRemaining[chest.id]?.display || '...'}
                          </span>
                          {isExpanded && (
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                speedUpUnlock(chest.id);
                              }}
                              className="mt-2 bg-green-500 text-white text-xs px-2 py-1 rounded hover:bg-green-600"
                            >
                              <Zap className="w-3 h-3 inline mr-1" />
                              Przyspiesz
                            </button>
                          )}
                        </div>
                      )}
                      
                      {chest.status === 'ready' && (
                        <div className="absolute inset-0 flex items-center justify-center">
                          <div className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-bold animate-bounce">
                            OTW√ìRZ!
                          </div>
                        </div>
                      )}
                      
                      {/* Chest Name (expanded view) */}
                      {isExpanded && (
                        <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 p-2">
                          <p className="text-xs text-white text-center font-medium">
                            {chestTypes[chest.type].name}
                          </p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>

            {/* Info Text (expanded view) */}
            {isExpanded && (
              <div className="mt-4 text-center">
                <p className="text-sm text-gray-400">
                  Zdobywaj skrzynie wykonujƒÖc zadania i wyzwania!
                </p>
                <div className="flex justify-center space-x-4 mt-2">
                  <span className="text-xs text-gray-500">
                    <Lock className="w-3 h-3 inline mr-1" />
                    Kliknij aby odblokowaƒá
                  </span>
                  <span className="text-xs text-gray-500">
                    <Clock className="w-3 h-3 inline mr-1" />
                    Odblokowanie trwa
                  </span>
                  <span className="text-xs text-gray-500">
                    <Sparkles className="w-3 h-3 inline mr-1" />
                    Gotowe do otwarcia
                  </span>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Opening Animation Modal */}
      {openingChest && !rewards && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="text-center">
            <div className="text-8xl animate-bounce mb-4">
              {chestTypes[chests.find(c => c.id === openingChest)?.type]?.icon}
            </div>
            <p className="text-white text-xl font-bold animate-pulse">Otwieranie skrzyni...</p>
          </div>
        </div>
      )}

      {/* Rewards Modal */}
      {rewards && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 animate-fade-in">
          <div className="bg-white rounded-xl p-8 max-w-md w-full mx-4 transform animate-bounce-in">
            <div className="text-center mb-6">
              <span className="text-6xl">{chestTypes[rewards.chestType].icon}</span>
              <h2 className="text-2xl font-bold mt-4 text-gray-900">
                {chestTypes[rewards.chestType].name} Otwarta!
              </h2>
            </div>

            {/* XP and Coins */}
            <div className="flex justify-center space-x-6 mb-6">
              <div className="text-center">
                <div className="bg-yellow-100 rounded-full w-16 h-16 flex items-center justify-center mb-2">
                  <Zap className="w-8 h-8 text-yellow-600" />
                </div>
                <p className="text-2xl font-bold text-gray-900">+{rewards.xp}</p>
                <p className="text-sm text-gray-600">XP</p>
              </div>
              <div className="text-center">
                <div className="bg-yellow-100 rounded-full w-16 h-16 flex items-center justify-center mb-2">
                  <Coins className="w-8 h-8 text-yellow-600" />
                </div>
                <p className="text-2xl font-bold text-gray-900">+{rewards.coins}</p>
                <p className="text-sm text-gray-600">Monet</p>
              </div>
            </div>

            {/* Items */}
            {rewards.items.length > 0 && (
              <div className="border-t pt-4">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">Otrzymane przedmioty:</h3>
                <div className="space-y-2">
                  {rewards.items.map((item, index) => (
                    <div key={index} className="flex items-center space-x-3 bg-gray-50 rounded-lg p-3">
                      <span className="text-2xl">{item.icon}</span>
                      <div className="flex-1">
                        <p className={`font-medium ${getRarityColor(item.rarity)}`}>
                          {item.name}
                        </p>
                        <p className="text-xs text-gray-600">{item.description}</p>
                      </div>
                      <span className={`text-xs px-2 py-1 rounded-full bg-opacity-20 ${
                        item.rarity === 'common' ? 'bg-gray-500 text-gray-700' :
                        item.rarity === 'rare' ? 'bg-blue-500 text-blue-700' :
                        item.rarity === 'epic' ? 'bg-purple-500 text-purple-700' :
                        'bg-orange-500 text-orange-700'
                      }`}>
                        {item.rarity === 'common' ? 'Zwyk≈Çy' :
                         item.rarity === 'rare' ? 'Rzadki' :
                         item.rarity === 'epic' ? 'Epicki' :
                         'Legendarny'}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Close Button */}
            <button
              onClick={() => {
                setRewards(null);
                // Auto add new chest after opening
                setTimeout(() => addNewChest(), 500);
              }}
              className="w-full mt-6 bg-gradient-to-r from-blue-500 to-purple-600 text-white py-3 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition-all"
            >
              ≈öwietnie!
            </button>
          </div>
        </div>
      )}

      <style jsx>{`
        @keyframes bounce-in {
          0% { transform: scale(0.3); opacity: 0; }
          50% { transform: scale(1.05); }
          70% { transform: scale(0.9); }
          100% { transform: scale(1); opacity: 1; }
        }
        
        @keyframes fade-in {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        .animate-bounce-in {
          animation: bounce-in 0.6s ease-out;
        }
        
        .animate-fade-in {
          animation: fade-in 0.3s ease-out;
        }
      `}</style>
    </>
  );
};

export default ChestSystem;
