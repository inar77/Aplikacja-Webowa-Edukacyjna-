import React, { useState } from 'react';
import { 
  Home, Target, Trophy, ShoppingBag, Users, User, Settings,
  Zap, Clock, CheckCircle, Lock, Flame, Star, Bell,
  MessageSquare, TrendingUp, Award, Book, Code, Briefcase,
  ChevronRight, ChevronDown, Search, LogOut, X
} from 'lucide-react';

const CareerWebApp = () => {
  const [activeSection, setActiveSection] = useState('home');
  const [rightSidebarOpen, setRightSidebarOpen] = useState(true);
  const [activeTaskStep, setActiveTaskStep] = useState({});
  const [showRewardAnimation, setShowRewardAnimation] = useState(false);
  const [lastReward, setLastReward] = useState(null);
  const [user, setUser] = useState({
    name: 'Jan Kowalski',
    level: 3,
    xp: 240,
    xpToNext: 500,
    totalXp: 1240,
    coins: 150,
    gems: 5,
    hearts: 3,
    maxHearts: 5,
    currentPath: 'Programista',
    streak: 7,
    streakFreeze: 2,
    xpBoost: 0,
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Jan',
    pathProgress: 35,
    rankPosition: 24,
    weeklyXp: 750,
    inventory: []
  });

  // Shop items with Duolingo-style rewards
  const [shopItems] = useState([
    {
      id: 1,
      name: 'Streak Freeze',
      description: 'Zachowaj seriƒô nawet gdy przegapisz dzie≈Ñ',
      price: 50,
      currency: 'coins',
      icon: 'üßä',
      type: 'consumable',
      effect: 'streakFreeze'
    },
    {
      id: 2,
      name: 'Podw√≥jne XP (30 min)',
      description: 'Zdobywaj 2x wiƒôcej XP przez p√≥≈Ç godziny',
      price: 100,
      currency: 'coins',
      icon: '‚ö°',
      type: 'boost',
      effect: 'xpBoost',
      duration: 30
    },
    {
      id: 3,
      name: 'Pe≈Çne ≈ºycia',
      description: 'Natychmiast uzupe≈Çnij wszystkie serca',
      price: 75,
      currency: 'coins',
      icon: '‚ù§Ô∏è',
      type: 'instant',
      effect: 'refillHearts'
    },
    {
      id: 4,
      name: 'Weekend Amulet',
      description: 'Brak utraty serc przez weekend',
      price: 3,
      currency: 'gems',
      icon: 'üîÆ',
      type: 'premium',
      effect: 'weekendAmulet'
    },
    {
      id: 5,
      name: 'Skrzynia z nagrodami',
      description: 'Losowa nagroda: 50-200 monet',
      price: 2,
      currency: 'gems',
      icon: 'üéÅ',
      type: 'lootbox',
      effect: 'randomReward'
    },
    {
      id: 6,
      name: 'Zmiana avatara',
      description: 'Odblokuj nowy styl avatara',
      price: 150,
      currency: 'coins',
      icon: 'üë§',
      type: 'cosmetic',
      effect: 'avatarStyle'
    }
  ]);

  const buyItem = (item) => {
    const currency = item.currency === 'gems' ? 'gems' : 'coins';
    
    if (user[currency] >= item.price) {
      // Deduct currency
      setUser(prev => ({
        ...prev,
        [currency]: prev[currency] - item.price,
        inventory: [...prev.inventory, item]
      }));

      // Apply item effect
      applyItemEffect(item);
      
      // Show reward animation
      setLastReward({
        type: 'purchase',
        item: item.name,
        icon: item.icon
      });
      setShowRewardAnimation(true);
      setTimeout(() => setShowRewardAnimation(false), 3000);
    }
  };

  const applyItemEffect = (item) => {
    switch(item.effect) {
      case 'streakFreeze':
        setUser(prev => ({ ...prev, streakFreeze: prev.streakFreeze + 1 }));
        break;
      case 'xpBoost':
        setUser(prev => ({ ...prev, xpBoost: Date.now() + (item.duration * 60000) }));
        break;
      case 'refillHearts':
        setUser(prev => ({ ...prev, hearts: prev.maxHearts }));
        break;
      case 'randomReward':
        const randomCoins = Math.floor(Math.random() * 150) + 50;
        setUser(prev => ({ ...prev, coins: prev.coins + randomCoins }));
        setLastReward(prev => ({ ...prev, bonus: `+${randomCoins} monet!` }));
        break;
      default:
        break;
    }
  };

  // Dynamic ranking data
  const [rankingData] = useState([
    { position: 1, name: 'Tomek R.', xp: 1250, trend: 'up', avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Tomek' },
    { position: 2, name: 'Maria K.', xp: 980, trend: 'up', avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Maria' },
    { position: 22, name: 'Pawe≈Ç M.', xp: 780, trend: 'down', avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Pawel' },
    { position: 23, name: 'Ania L.', xp: 760, trend: 'up', avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Ania' },
    { position: 24, name: 'Ty', xp: 750, trend: 'same', avatar: user.avatar, isUser: true },
    { position: 25, name: 'Kuba W.', xp: 745, trend: 'up', avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Kuba' },
    { position: 26, name: 'Ola Z.', xp: 740, trend: 'down', avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Ola' }
  ]);

  // Top Navigation Bar (Facebook style)
  const TopBar = () => (
    <div className="bg-blue-600 border-b-2 border-blue-700 h-12 fixed top-0 left-0 right-0 z-50">
      <div className="max-w-screen-2xl mx-auto px-4 h-full flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <h1 className="text-white font-bold text-xl">PathFinder</h1>
          <div className="relative hidden md:block">
            <input 
              type="text" 
              placeholder="Szukaj zada≈Ñ..."
              className="bg-white/10 text-white placeholder-white/70 px-3 py-1 rounded text-sm w-64 focus:bg-white focus:text-gray-900 focus:placeholder-gray-500 transition-all"
            />
            <Search className="absolute right-2 top-1.5 w-4 h-4 text-white/70" />
          </div>
        </div>
        
        <div className="flex items-center space-x-6">
          <button className="hidden lg:block text-white hover:text-white/80 text-sm">G≈Ç√≥wna</button>
          <button className="hidden lg:block text-white hover:text-white/80 text-sm">Profil</button>
          
          <div className="flex items-center space-x-3 border-l border-blue-500 pl-6">
            <button className="relative hover:bg-blue-700 p-1 rounded transition-colors">
              <MessageSquare className="w-5 h-5 text-white" />
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center animate-pulse">3</span>
            </button>
            <button className="relative hover:bg-blue-700 p-1 rounded transition-colors">
              <Bell className="w-5 h-5 text-white" />
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center animate-pulse">5</span>
            </button>
            <button 
              onClick={() => setRightSidebarOpen(!rightSidebarOpen)}
              className="lg:hidden hover:bg-blue-700 p-1 rounded transition-colors"
            >
              <Users className="w-5 h-5 text-white" />
            </button>
            <button className="hover:bg-blue-700 p-1 rounded transition-colors">
              <Settings className="w-5 h-5 text-white" />
            </button>
            <button className="hover:bg-blue-700 p-1 rounded transition-colors">
              <LogOut className="w-5 h-5 text-white" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  // Left Sidebar
  const LeftSidebar = () => (
    <div className="w-64 fixed left-0 top-12 bottom-0 bg-gray-50 border-r border-gray-300 overflow-y-auto">
      {/* User Profile Card */}
      <div className="p-4 bg-white border-b">
        <div className="flex items-center space-x-3">
          <img 
            src={user.avatar} 
            alt={user.name}
            className="w-12 h-12 rounded-lg border-2 border-blue-200"
          />
          <div>
            <p className="font-semibold text-gray-900">{user.name}</p>
            <p className="text-sm text-gray-600">Poziom {user.level} ‚Ä¢ {user.currentPath}</p>
          </div>
        </div>
        
        <div className="mt-4 space-y-2">
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">XP</span>
            <span className="font-medium">{user.xp}/{user.xpToNext}</span>
          </div>
          <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
            <div 
              className="h-full bg-gradient-to-r from-blue-500 to-blue-600 transition-all duration-1000 ease-out"
              style={{ width: `${(user.xp / user.xpToNext) * 100}%` }}
            />
          </div>
        </div>
      </div>

      {/* Navigation Menu */}
      <div className="p-2">
        <button 
          onClick={() => setActiveSection('home')}
          className={`w-full flex items-center space-x-3 px-3 py-2 rounded hover:bg-gray-200 transition-colors ${
            activeSection === 'home' ? 'bg-gray-200 font-medium' : ''
          }`}
        >
          <Home className="w-5 h-5 text-gray-600" />
          <span>Strona g≈Ç√≥wna</span>
        </button>
        
        <button 
          onClick={() => setActiveSection('tasks')}
          className={`w-full flex items-center space-x-3 px-3 py-2 rounded hover:bg-gray-200 transition-colors ${
            activeSection === 'tasks' ? 'bg-gray-200 font-medium' : ''
          }`}
        >
          <Target className="w-5 h-5 text-gray-600" />
          <span>Zadania</span>
          <span className="ml-auto bg-red-500 text-white text-xs px-2 py-0.5 rounded-full">12</span>
        </button>
        
        <button 
          onClick={() => setActiveSection('courses')}
          className={`w-full flex items-center space-x-3 px-3 py-2 rounded hover:bg-gray-200 transition-colors ${
            activeSection === 'courses' ? 'bg-gray-200 font-medium' : ''
          }`}
        >
          <Book className="w-5 h-5 text-gray-600" />
          <span>Kursy</span>
        </button>
        
        <button 
          onClick={() => setActiveSection('shop')}
          className={`w-full flex items-center space-x-3 px-3 py-2 rounded hover:bg-gray-200 transition-colors ${
            activeSection === 'shop' ? 'bg-gray-200 font-medium' : ''
          }`}
        >
          <ShoppingBag className="w-5 h-5 text-gray-600" />
          <span>Sklep</span>
        </button>
        
        <button 
          onClick={() => setActiveSection('community')}
          className={`w-full flex items-center space-x-3 px-3 py-2 rounded hover:bg-gray-200 transition-colors ${
            activeSection === 'community' ? 'bg-gray-200 font-medium' : ''
          }`}
        >
          <Users className="w-5 h-5 text-gray-600" />
          <span>Spo≈Çeczno≈õƒá</span>
        </button>
        
        <button 
          onClick={() => setActiveSection('achievements')}
          className={`w-full flex items-center space-x-3 px-3 py-2 rounded hover:bg-gray-200 transition-colors ${
            activeSection === 'achievements' ? 'bg-gray-200 font-medium' : ''
          }`}
        >
          <Trophy className="w-5 h-5 text-gray-600" />
          <span>OsiƒÖgniƒôcia</span>
        </button>
      </div>

      {/* Quick Stats */}
      <div className="p-4 border-t">
        <p className="text-xs text-gray-500 uppercase tracking-wider mb-3">Statystyki</p>
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Flame className="w-4 h-4 text-orange-500" />
              <span className="text-sm">Seria</span>
            </div>
            <span className="font-bold">{user.streak} dni</span>
          </div>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 bg-yellow-400 rounded-full" />
              <span className="text-sm">Monety</span>
            </div>
            <span className="font-bold">{user.coins}</span>
          </div>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Star className="w-4 h-4 text-blue-500" />
              <span className="text-sm">Ca≈Çkowite XP</span>
            </div>
            <span className="font-bold">{user.totalXp}</span>
          </div>
        </div>
      </div>
    </div>
  );

  // Right Sidebar with responsive toggle
  const RightSidebar = () => (
    <div className={`w-64 fixed right-0 top-12 bottom-0 bg-gray-50 border-l border-gray-300 overflow-y-auto transition-transform duration-300 ${
      rightSidebarOpen ? 'translate-x-0' : 'translate-x-full'
    } lg:translate-x-0`}>
      {/* Toggle button for smaller screens */}
      <button
        onClick={() => setRightSidebarOpen(false)}
        className="lg:hidden absolute left-2 top-2 p-1 hover:bg-gray-200 rounded"
      >
        <X className="w-5 h-5" />
      </button>
      {/* Friends Online */}
      <div className="p-4 bg-white border-b">
        <h3 className="font-semibold text-gray-900 mb-3">Znajomi online (8)</h3>
        <div className="space-y-2">
          {['Anna W.', 'Micha≈Ç K.', 'Piotr N.', 'Kasia M.'].map((friend) => (
            <button key={friend} className="w-full flex items-center space-x-2 hover:bg-gray-50 p-1 rounded">
              <div className="w-2 h-2 bg-green-500 rounded-full" />
              <span className="text-sm">{friend}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Recent Achievements */}
      <div className="p-4 bg-white border-b">
        <h3 className="font-semibold text-gray-900 mb-3">Ostatnie osiƒÖgniƒôcia</h3>
        <div className="space-y-3">
          <div className="flex items-start space-x-2">
            <span className="text-xl">üèÜ</span>
            <div>
              <p className="text-sm font-medium">Pierwszy tydzie≈Ñ</p>
              <p className="text-xs text-gray-500">2 dni temu</p>
            </div>
          </div>
          <div className="flex items-start space-x-2">
            <span className="text-xl">üêç</span>
            <div>
              <p className="text-sm font-medium">Python Master</p>
              <p className="text-xs text-gray-500">Tydzie≈Ñ temu</p>
            </div>
          </div>
          <div className="flex items-start space-x-2">
            <span className="text-xl">‚ö°</span>
            <div>
              <p className="text-sm font-medium">Speed Learner</p>
              <p className="text-xs text-gray-500">2 tygodnie temu</p>
            </div>
          </div>
        </div>
      </div>

      {/* Dynamic Leaderboard */}
      <div className="p-4 bg-white">
        <div className="flex items-center justify-between mb-3">
          <h3 className="font-semibold text-gray-900">Ranking tygodnia</h3>
          <button className="text-xs text-blue-600 hover:text-blue-700">Zobacz pe≈Çny ‚Üí</button>
        </div>
        
        {/* Top 3 */}
        <div className="space-y-1 mb-3 pb-3 border-b">
          {rankingData.slice(0, 2).map((player) => (
            <div key={player.position} className="flex items-center justify-between p-1.5 rounded hover:bg-gray-50 transition-colors">
              <div className="flex items-center space-x-2">
                <span className={`text-sm font-bold w-6 ${
                  player.position === 1 ? 'text-yellow-500' : 
                  player.position === 2 ? 'text-gray-400' : 'text-orange-600'
                }`}>
                  {player.position}.
                </span>
                <div className="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-xs font-bold">
                  {player.name.split(' ').map(n => n[0]).join('')}
                </div>
                <span className="text-sm font-medium">{player.name}</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-sm font-semibold">{player.xp.toLocaleString()}</span>
                {player.trend === 'up' && <span className="text-green-500 text-xs">‚Üë</span>}
                {player.trend === 'down' && <span className="text-red-500 text-xs">‚Üì</span>}
              </div>
            </div>
          ))}
        </div>
        
        {/* User context (pokazuje kto goni u≈ºytkownika) */}
        <div className="space-y-1">
          <div className="text-xs text-gray-500 mb-1">Twoja pozycja:</div>
          {rankingData.slice(2).map((player) => (
            <div 
              key={player.position} 
              className={`flex items-center justify-between p-1.5 rounded transition-all ${
                player.isUser 
                  ? 'bg-blue-50 border border-blue-200 scale-105' 
                  : 'hover:bg-gray-50'
              }`}
            >
              <div className="flex items-center space-x-2">
                <span className={`text-sm w-6 ${player.isUser ? 'font-bold text-blue-600' : 'text-gray-600'}`}>
                  {player.position}.
                </span>
                <img src={player.avatar} alt={player.name} className="w-6 h-6 rounded-full" />
                <span className={`text-sm ${player.isUser ? 'font-bold' : ''}`}>
                  {player.isUser ? 'Ty' : player.name}
                </span>
                {!player.isUser && player.position === 25 && (
                  <span className="text-xs text-orange-500 font-medium">goni Ciƒô! üî•</span>
                )}
              </div>
              <div className="flex items-center space-x-2">
                <span className={`text-sm ${player.isUser ? 'font-bold' : 'font-semibold'}`}>
                  {player.xp.toLocaleString()}
                </span>
                {player.trend === 'up' && <span className="text-green-500 text-xs">‚Üë</span>}
                {player.trend === 'down' && <span className="text-red-500 text-xs">‚Üì</span>}
                {player.isUser && (
                  <span className="text-xs text-blue-600 font-medium">
                    +{player.position === 23 ? '10' : '5'} do {player.position - 1}. miejsca
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
        
        <div className="mt-3 pt-3 border-t">
          <div className="flex items-center justify-between text-xs">
            <span className="text-gray-500">Do ko≈Ñca tygodnia:</span>
            <span className="font-semibold text-gray-700">3 dni 14h</span>
          </div>
          <div className="mt-2 w-full h-1.5 bg-gray-200 rounded-full overflow-hidden">
            <div className="h-full bg-gradient-to-r from-blue-400 to-blue-600 w-3/5"></div>
          </div>
        </div>
      </div>
    </div>
  );

  // Career Path Map Component - Enhanced with milestones
  const CareerPathMap = () => {
    const mainPath = [
      { 
        id: 1, 
        name: 'Start', 
        icon: 'üöÄ',
        completed: true, 
        current: false,
        milestones: [],
        tasksCompleted: 3,
        totalTasks: 3
      },
      { 
        id: 2, 
        name: 'Podstawy', 
        icon: 'üìò',
        completed: false, 
        current: true,
        milestones: [
          { name: 'Zmienne', completed: true },
          { name: 'Funkcje', completed: true },
          { name: 'Obiekty', completed: false, current: true },
          { name: 'DOM', completed: false },
          { name: 'Async', completed: false },
          { name: 'Testy', completed: false }
        ],
        tasksCompleted: 7,
        totalTasks: 20
      },
      { 
        id: 3, 
        name: 'Praktyka', 
        icon: '‚öôÔ∏è',
        completed: false, 
        current: false,
        milestones: [
          { name: 'Mini projekty', completed: false },
          { name: 'Debugging', completed: false },
          { name: 'Git workflow', completed: false },
          { name: 'Code review', completed: false }
        ],
        tasksCompleted: 0,
        totalTasks: 15,
        locked: true
      },
      { 
        id: 4, 
        name: 'Projekty', 
        icon: 'üíª',
        completed: false, 
        current: false,
        milestones: [
          { name: 'Todo App', completed: false },
          { name: 'API Integration', completed: false },
          { name: 'Full Stack', completed: false }
        ],
        tasksCompleted: 0,
        totalTasks: 10,
        locked: true
      },
      { 
        id: 5, 
        name: 'Mistrzostwo', 
        icon: 'üèÜ',
        completed: false, 
        current: false,
        milestones: [
          { name: 'Open Source', completed: false },
          { name: 'Mentoring', completed: false }
        ],
        tasksCompleted: 0,
        totalTasks: 5,
        locked: true
      }
    ];

    // Optional side quests
    const sideQuests = [
      { name: 'CSS Animations', icon: 'üé®', xp: 50, available: true },
      { name: 'TypeScript Intro', icon: 'üìù', xp: 75, available: true },
      { name: 'Performance', icon: '‚ö°', xp: 100, available: false }
    ];

    const currentStage = mainPath.find(stage => stage.current);
    const nextMilestone = currentStage?.milestones.find(m => !m.completed);
    const tasksToNextStage = currentStage ? currentStage.totalTasks - currentStage.tasksCompleted : 0;

    return (
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 mb-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-semibold text-gray-900">Twoja droga kariery - {user.currentPath}</h3>
          {/* Immediate goal */}
          <div className="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-medium animate-pulse">
            üéØ Jeszcze {tasksToNextStage} zada≈Ñ do nastƒôpnego etapu!
          </div>
        </div>
        
        {/* Current stage details */}
        {currentStage && (
          <div className="bg-white/80 rounded-lg p-4 mb-4 border border-blue-200">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <span className="text-2xl">{currentStage.icon}</span>
                <div>
                  <h4 className="font-bold text-gray-900">Etap: {currentStage.name}</h4>
                  <p className="text-sm text-gray-600">
                    Uko≈Ñczy≈Çe≈õ {currentStage.tasksCompleted}/{currentStage.totalTasks} zada≈Ñ
                  </p>
                </div>
              </div>
              <div className="text-right">
                <p className="text-2xl font-bold text-blue-600">
                  {Math.round((currentStage.tasksCompleted / currentStage.totalTasks) * 100)}%
                </p>
                <p className="text-xs text-gray-500">tego etapu</p>
              </div>
            </div>
            
            {/* Milestones within current stage */}
            <div className="grid grid-cols-6 gap-2 mb-3">
              {currentStage.milestones.map((milestone, idx) => (
                <div key={idx} className="text-center">
                  <div className={`w-10 h-10 mx-auto rounded-full flex items-center justify-center text-xs font-medium transition-all ${
                    milestone.completed 
                      ? 'bg-green-500 text-white' 
                      : milestone.current 
                      ? 'bg-blue-500 text-white animate-pulse ring-2 ring-blue-300' 
                      : 'bg-gray-200 text-gray-500'
                  }`}>
                    {milestone.completed ? '‚úì' : idx + 1}
                  </div>
                  <p className={`text-xs mt-1 ${
                    milestone.current ? 'font-bold text-blue-600' : 
                    milestone.completed ? 'text-green-600' : 'text-gray-400'
                  }`}>
                    {milestone.name}
                  </p>
                </div>
              ))}
            </div>
            
            {/* Progress to next milestone */}
            {nextMilestone && (
              <div className="bg-blue-50 rounded p-2 text-sm">
                <span className="text-blue-700">Nastƒôpny kamie≈Ñ milowy: </span>
                <span className="font-semibold text-blue-900">{nextMilestone.name}</span>
              </div>
            )}
          </div>
        )}
        
        <div className="relative">
          {/* Main path progress line */}
          <div className="absolute top-8 left-0 right-0 h-1 bg-gray-300">
            <div 
              className="h-full bg-gradient-to-r from-green-500 to-blue-500 transition-all duration-1000"
              style={{ width: `${user.pathProgress}%` }}
            />
          </div>
          
          {/* Main path checkpoints */}
          <div className="relative flex justify-between">
            {mainPath.map((checkpoint) => (
              <div key={checkpoint.id} className="flex flex-col items-center">
                <div className={`w-16 h-16 rounded-full flex items-center justify-center z-10 transition-all duration-300 ${
                  checkpoint.completed 
                    ? 'bg-green-500 text-white scale-100' 
                    : checkpoint.current 
                    ? 'bg-blue-500 text-white scale-110 animate-pulse shadow-lg ring-4 ring-blue-300' 
                    : checkpoint.locked
                    ? 'bg-gray-400 text-gray-600 scale-90 opacity-50'
                    : 'bg-gray-300 text-gray-600 scale-90'
                }`}>
                  <span className="text-2xl">{checkpoint.icon}</span>
                </div>
                <span className={`mt-2 text-xs font-medium ${
                  checkpoint.current ? 'text-blue-600' : checkpoint.completed ? 'text-green-600' : 'text-gray-500'
                }`}>
                  {checkpoint.name}
                </span>
                {checkpoint.current && (
                  <span className="text-xs text-blue-500 mt-1 font-bold animate-pulse">Tu jeste≈õ</span>
                )}
                {checkpoint.locked && (
                  <Lock className="w-3 h-3 text-gray-400 mt-1" />
                )}
              </div>
            ))}
          </div>
        </div>
        
        {/* Side quests section */}
        <div className="mt-6 pt-4 border-t">
          <div className="flex items-center justify-between mb-3">
            <h4 className="font-semibold text-gray-700 text-sm">≈öcie≈ºki poboczne (opcjonalne)</h4>
            <span className="text-xs text-gray-500">Dodatkowe XP i umiejƒôtno≈õci</span>
          </div>
          <div className="grid grid-cols-3 gap-2">
            {sideQuests.map((quest, idx) => (
              <button
                key={idx}
                disabled={!quest.available}
                className={`p-2 rounded-lg border text-sm transition-all ${
                  quest.available 
                    ? 'bg-white hover:bg-purple-50 border-purple-200 hover:border-purple-400 hover:scale-105 cursor-pointer' 
                    : 'bg-gray-50 border-gray-200 opacity-50 cursor-not-allowed'
                }`}
              >
                <div className="flex items-center space-x-2">
                  <span className="text-lg">{quest.icon}</span>
                  <div className="text-left">
                    <p className="font-medium text-xs">{quest.name}</p>
                    <p className="text-xs text-purple-600">+{quest.xp} XP</p>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>
        
        <div className="mt-4 flex items-center justify-between">
          <div>
            <p className="text-sm text-gray-600">Og√≥lny postƒôp ≈õcie≈ºki</p>
            <p className="text-2xl font-bold text-gray-900">{user.pathProgress}%</p>
          </div>
          <button className="bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
            Kontynuuj naukƒô ‚Üí
          </button>
        </div>
      </div>
    );
  };

  // Main Content Area
  const MainContent = () => {
    if (activeSection === 'home') {
      return (
        <div className="space-y-4">
          {/* Career Path Map */}
          <CareerPathMap />
          {/* Daily Goal Card */}
          <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold mb-2">Witaj z powrotem, {user.name.split(' ')[0]}!</h2>
                <p>Kontynuuj swojƒÖ seriƒô {user.streak} dni i zdobƒÖd≈∫ nowe umiejƒôtno≈õci</p>
              </div>
              <div className="text-5xl">üî•</div>
            </div>
            <button className="mt-4 bg-white text-blue-600 px-6 py-2 rounded-lg font-semibold hover:bg-blue-50 transition-colors">
              Rozpocznij dzisiejsze zadania
            </button>
          </div>

          {/* Stats Grid with microanimations */}
          <div className="grid grid-cols-4 gap-4">
            <div className="bg-white rounded-lg border p-4 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer group">
              <div className="flex items-center justify-between mb-2">
                <Target className="w-8 h-8 text-blue-500 group-hover:scale-110 transition-transform" />
                <span className="text-2xl font-bold animate-pulse">3/5</span>
              </div>
              <p className="text-sm text-gray-600">Zadania dzi≈õ</p>
            </div>
            <div className="bg-white rounded-lg border p-4 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer group">
              <div className="flex items-center justify-between mb-2">
                <Zap className="w-8 h-8 text-yellow-500 group-hover:rotate-12 transition-transform" />
                <span className="text-2xl font-bold">180</span>
              </div>
              <p className="text-sm text-gray-600">XP zdobyte dzi≈õ</p>
            </div>
            <div className="bg-white rounded-lg border p-4 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer group">
              <div className="flex items-center justify-between mb-2">
                <Clock className="w-8 h-8 text-green-500 group-hover:rotate-180 transition-transform duration-500" />
                <span className="text-2xl font-bold">45m</span>
              </div>
              <p className="text-sm text-gray-600">Czas nauki</p>
            </div>
            <div className="bg-white rounded-lg border p-4 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer group">
              <div className="flex items-center justify-between mb-2">
                <Trophy className="w-8 h-8 text-purple-500 group-hover:animate-bounce" />
                <span className="text-2xl font-bold">12</span>
              </div>
              <p className="text-sm text-gray-600">OsiƒÖgniƒôcia</p>
            </div>
          </div>

          {/* Activity Feed with hover effects */}
          <div className="bg-white rounded-lg border overflow-hidden">
            <div className="p-4 border-b">
              <h3 className="font-semibold text-gray-900">Twoja aktywno≈õƒá</h3>
            </div>
            <div className="divide-y">
              <div className="p-4 flex items-start space-x-3 hover:bg-gray-50 transition-colors cursor-pointer group">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform">
                  <CheckCircle className="w-4 h-4 text-green-600" />
                </div>
                <div className="flex-1">
                  <p className="text-sm"><strong>Uko≈Ñczy≈Çe≈õ</strong> zadanie "Podstawy JavaScript"</p>
                  <p className="text-xs text-gray-500">2 godziny temu ‚Ä¢ +50 XP</p>
                </div>
              </div>
              <div className="p-4 flex items-start space-x-3 hover:bg-gray-50 transition-colors cursor-pointer group">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform">
                  <TrendingUp className="w-4 h-4 text-blue-600" />
                </div>
                <div className="flex-1">
                  <p className="text-sm"><strong>Awansowa≈Çe≈õ</strong> na poziom 3</p>
                  <p className="text-xs text-gray-500">Wczoraj o 18:30</p>
                </div>
              </div>
              <div className="p-4 flex items-start space-x-3 hover:bg-gray-50 transition-colors cursor-pointer group">
                <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform">
                  <Award className="w-4 h-4 text-yellow-600" />
                </div>
                <div className="flex-1">
                  <p className="text-sm"><strong>Zdoby≈Çe≈õ odznakƒô</strong> "Pierwszy tydzie≈Ñ"</p>
                  <p className="text-xs text-gray-500">2 dni temu</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    if (activeSection === 'tasks') {
      const tasksWithSteps = [
        { 
          id: 1,
          title: 'Algorytmy sortowania', 
          category: 'Programowanie', 
          xp: 100, 
          time: '30 min', 
          difficulty: '≈õrednie',
          totalSteps: 5,
          currentStep: activeTaskStep[1] || 0,
          steps: [
            { name: 'Teoria sortowania', completed: (activeTaskStep[1] || 0) >= 1 },
            { name: 'Bubble Sort', completed: (activeTaskStep[1] || 0) >= 2 },
            { name: 'Quick Sort', completed: (activeTaskStep[1] || 0) >= 3 },
            { name: 'Por√≥wnanie wydajno≈õci', completed: (activeTaskStep[1] || 0) >= 4 },
            { name: 'Quiz ko≈Ñcowy', completed: (activeTaskStep[1] || 0) >= 5 }
          ]
        },
        { 
          id: 2,
          title: 'Komunikacja asertywna', 
          category: 'Soft Skills', 
          xp: 50, 
          time: '15 min', 
          difficulty: '≈Çatwe',
          totalSteps: 3,
          currentStep: activeTaskStep[2] || 0,
          steps: [
            { name: 'Czym jest asertywno≈õƒá?', completed: (activeTaskStep[2] || 0) >= 1 },
            { name: 'Techniki komunikacji', completed: (activeTaskStep[2] || 0) >= 2 },
            { name: 'ƒÜwiczenia praktyczne', completed: (activeTaskStep[2] || 0) >= 3 }
          ]
        },
        { 
          id: 3,
          title: 'React Hooks', 
          category: 'Frontend', 
          xp: 150, 
          time: '45 min', 
          difficulty: 'trudne',
          totalSteps: 6,
          currentStep: activeTaskStep[3] || 0,
          steps: [
            { name: 'useState podstawy', completed: (activeTaskStep[3] || 0) >= 1 },
            { name: 'useEffect lifecycle', completed: (activeTaskStep[3] || 0) >= 2 },
            { name: 'useContext pattern', completed: (activeTaskStep[3] || 0) >= 3 },
            { name: 'Custom hooks', completed: (activeTaskStep[3] || 0) >= 4 },
            { name: 'Optymalizacja', completed: (activeTaskStep[3] || 0) >= 5 },
            { name: 'Projekt praktyczny', completed: (activeTaskStep[3] || 0) >= 6 }
          ]
        },
        { 
          id: 4,
          title: 'Praca w stresie', 
          category: 'Soft Skills', 
          xp: 75, 
          time: '20 min', 
          difficulty: '≈õrednie',
          totalSteps: 4,
          currentStep: activeTaskStep[4] || 0,
          steps: [
            { name: 'Rozpoznaj objawy stresu', completed: (activeTaskStep[4] || 0) >= 1 },
            { name: 'Techniki oddechowe', completed: (activeTaskStep[4] || 0) >= 2 },
            { name: 'ZarzƒÖdzanie czasem', completed: (activeTaskStep[4] || 0) >= 3 },
            { name: 'Symulacja deadline', completed: (activeTaskStep[4] || 0) >= 4 }
          ]
        }
      ];

      const handleStepProgress = (taskId) => {
        setActiveTaskStep(prev => ({
          ...prev,
          [taskId]: Math.min((prev[taskId] || 0) + 1, tasksWithSteps.find(t => t.id === taskId).totalSteps)
        }));
      };

      return (
        <div className="space-y-4">
          <div className="bg-white rounded-lg border p-6">
            <h2 className="text-xl font-bold mb-4">Zadania do wykonania</h2>
            
            <div className="grid grid-cols-2 gap-4">
              {tasksWithSteps.map((task) => (
                <div key={task.id} className="border rounded-lg p-4 hover:shadow-md transition-all">
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <h4 className="font-semibold">{task.title}</h4>
                      <p className="text-sm text-gray-500">{task.category}</p>
                    </div>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      task.difficulty === '≈Çatwe' ? 'bg-green-100 text-green-700' :
                      task.difficulty === '≈õrednie' ? 'bg-yellow-100 text-yellow-700' :
                      'bg-red-100 text-red-700'
                    }`}>
                      {task.difficulty}
                    </span>
                  </div>
                  
                  {/* Progress Section */}
                  <div className="mb-3">
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-xs font-medium text-gray-600">
                        Krok {task.currentStep}/{task.totalSteps}
                      </span>
                      <span className="text-xs text-gray-500">
                        {Math.round((task.currentStep / task.totalSteps) * 100)}% uko≈Ñczone
                      </span>
                    </div>
                    <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-gradient-to-r from-blue-400 to-blue-600 transition-all duration-500"
                        style={{ width: `${(task.currentStep / task.totalSteps) * 100}%` }}
                      />
                    </div>
                    
                    {/* Steps breakdown */}
                    <div className="mt-2 space-y-1">
                      {task.steps.slice(0, 3).map((step, idx) => (
                        <div key={idx} className="flex items-center space-x-2 text-xs">
                          <div className={`w-4 h-4 rounded-full flex items-center justify-center ${
                            step.completed 
                              ? 'bg-green-500 text-white' 
                              : idx === task.currentStep 
                              ? 'bg-blue-500 text-white animate-pulse' 
                              : 'bg-gray-300'
                          }`}>
                            {step.completed ? '‚úì' : idx + 1}
                          </div>
                          <span className={`${
                            step.completed ? 'text-gray-500 line-through' : 
                            idx === task.currentStep ? 'font-medium text-gray-900' : 'text-gray-400'
                          }`}>
                            {step.name}
                          </span>
                        </div>
                      ))}
                      {task.steps.length > 3 && (
                        <div className="text-xs text-gray-400 pl-6">
                          +{task.steps.length - 3} wiƒôcej krok√≥w...
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-4 text-sm text-gray-600 mb-3">
                    <span className="flex items-center">
                      <Zap className="w-4 h-4 mr-1 text-yellow-500" />
                      {task.xp} XP
                    </span>
                    <span className="flex items-center">
                      <Clock className="w-4 h-4 mr-1" />
                      {task.time}
                    </span>
                  </div>
                  
                  <button 
                    onClick={() => handleStepProgress(task.id)}
                    disabled={task.currentStep >= task.totalSteps}
                    className={`w-full py-2 rounded font-medium transition-all ${
                      task.currentStep >= task.totalSteps 
                        ? 'bg-green-100 text-green-700 cursor-not-allowed' 
                        : task.currentStep > 0
                        ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700'
                        : 'bg-blue-500 text-white hover:bg-blue-600'
                    }`}
                  >
                    {task.currentStep >= task.totalSteps 
                      ? '‚úì Uko≈Ñczone' 
                      : task.currentStep > 0 
                      ? `Kontynuuj (krok ${task.currentStep + 1})`
                      : 'Rozpocznij'}
                  </button>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="bg-white rounded-lg border p-6">
        <h2 className="text-xl font-bold mb-4">{activeSection}</h2>
        <p className="text-gray-600">Sekcja w budowie...</p>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <TopBar />
      <LeftSidebar />
      <RightSidebar />
      
      {/* Main Content with proper responsive margins */}
      <div className={`ml-64 ${rightSidebarOpen ? 'lg:mr-64' : 'mr-0'} mt-12 p-6 transition-all duration-300`}>
        <MainContent />
      </div>
      
      {/* Reward Animation Overlay */}
      {showRewardAnimation && lastReward && (
        <div className="fixed inset-0 pointer-events-none flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl shadow-2xl p-8 pointer-events-auto animate-bounce-in">
            <div className="text-center">
              <div className="text-6xl mb-4 animate-float">{lastReward.icon}</div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                {lastReward.type === 'purchase' ? 'Zakupiono!' : 'Nagroda!'}
              </h2>
              <p className="text-lg text-gray-600">{lastReward.item}</p>
              {lastReward.bonus && (
                <p className="text-xl font-bold text-green-500 mt-2 animate-pulse">
                  {lastReward.bonus}
                </p>
              )}
            </div>
          </div>
        </div>
      )}
      
      <style jsx>{`
        @keyframes slide-in {
          from { transform: translateY(20px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
        
        @keyframes bounce-in {
          0% { transform: scale(0); opacity: 0; }
          50% { transform: scale(1.1); }
          100% { transform: scale(1); opacity: 1; }
        }
        
        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-10px); }
        }
        
        @keyframes spin-slow {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        
        .animate-slide-in { animation: slide-in 0.5s ease-out; }
        .animate-bounce-in { animation: bounce-in 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55); }
        .animate-float { animation: float 2s ease-in-out infinite; }
        .animate-spin-slow { animation: spin-slow 3s linear infinite; }
      `}</style>
    </div>
  );
};

export default CareerWebApp;
